precompile(Tuple{typeof(Base.:(!=)), UInt64, UInt64})
precompile(Tuple{typeof(JuliaInterpreter.__init__)})
precompile(Tuple{typeof(Revise.__init__)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, Revise.PkgData}, Revise.PkgData, Base.PkgId})
precompile(Tuple{Revise.TaskThunk})
precompile(Tuple{typeof(Revise.watch_manifest), String})
precompile(Tuple{typeof(FileWatching.poll_file), String, Float64, Int64})
precompile(Tuple{typeof(Revise.watch_package_callback), Base.PkgId})
precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Revise.PkgData}, Base.PkgId})
precompile(Tuple{Type{Revise.PkgData}, Base.PkgId})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}}, Pair{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, CodeTracking.PkgFiles, Base.PkgId})
precompile(Tuple{typeof(Base.Filesystem.cd), Revise.var"#40#41"{Revise.PkgData}, String})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(Base.vcat), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(OhMyREPL.__init__)})
precompile(Tuple{typeof(Revise.watch_includes), Module, String})
precompile(Tuple{Base.Multimedia.var"#@MIME_str", LineNumberNode, Module, Any})
precompile(Tuple{Base.var"#@r_str", LineNumberNode, Module, Any, Vararg{Any}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Revise.WatchList}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Revise.WatchList}, Revise.WatchList, String})
precompile(Tuple{typeof(Base.getindex), Base.EnvDict, String})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(ColorTypes.__init__)})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(GR.__init__)})
precompile(Tuple{typeof(Base.stat), RelocatableFolders.Path})
precompile(Tuple{Base.var"##open#355", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), Base.var"#364#365"{String}, RelocatableFolders.Path})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, RelocatableFolders.Path})
precompile(Tuple{Base.var"##sprint#426", Nothing, Int64, typeof(Base.sprint), Function, RelocatableFolders.Path})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, RelocatableFolders.Path})
precompile(Tuple{typeof(PlotThemes.__init__)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PlotThemes.PlotTheme}, PlotThemes.PlotTheme, Symbol})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{typeof(Plots.__init__)})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.foreach), Function, Array{Base.Dict{Symbol, Any}, 1}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Font, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Plots.reset_axis_defaults_byletter!)})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Symbol, Any}, Symbol, Tuple{}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Base.Dict{Symbol, Symbol}}, Symbol})
precompile(Tuple{typeof(Plots.treats_y_as_x), Symbol})
precompile(Tuple{typeof(Base.delete!), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{Type{NamedTuple{(:fontfamily, :dpi, :linewidth, :label), T} where T<:Tuple}, Tuple{String, Int64, Float64, String}})
precompile(Tuple{Plots.var"#default##kw", NamedTuple{(:fontfamily, :dpi, :linewidth, :label), Tuple{String, Int64, Float64, String}}, typeof(Plots.default)})
precompile(Tuple{typeof(Plots.default), Symbol, Int64})
precompile(Tuple{typeof(Plots.default), Symbol, String})
precompile(Tuple{typeof(Plots.default), Symbol, Float64})
precompile(Tuple{typeof(OhMyREPL.BracketInserter.enable_autocomplete_brackets), Bool})
precompile(Tuple{Base.var"#@__DIR__", LineNumberNode, Module})
precompile(Tuple{typeof(VSCodeServer.JuliaInterpreter.__init__)})
precompile(Tuple{typeof(VSCodeServer.__init__)})
precompile(Tuple{typeof(VSCodeServer.on_pkg_load), Base.PkgId})
precompile(Tuple{typeof(Base.popfirst!), Array{String, 1}})
precompile(Tuple{Base.var"#@static", LineNumberNode, Module, Any})
precompile(Tuple{Base.var"#@v_str", LineNumberNode, Module, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#1#3", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, Main.var"#1#3"}})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.atreplinit), Function})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{String, 1}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:is_dev, :crashreporting_pipename), T} where T<:Tuple}, Tuple{Bool, String}})
precompile(Tuple{typeof(Sockets.uv_connectcb), Ptr{Nothing}, Int32})
precompile(Tuple{VSCodeServer.var"#serve##kw", NamedTuple{(:is_dev, :crashreporting_pipename), Tuple{Bool, String}}, typeof(VSCodeServer.serve), String})
precompile(Tuple{typeof(Revise.revise_file_queued), Revise.PkgData, String})
precompile(Tuple{typeof(Base.notify), Base.GenericCondition{Base.Threads.SpinLock}})
precompile(Tuple{typeof(Base.run), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}})
precompile(Tuple{Type{REPL.LineEditREPL}, REPL.Terminals.TextTerminal, Bool, Bool})
precompile(Tuple{Type{REPL.LineEditREPL}, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Main.var"#2#4"{Array{String, 1}}, REPL.LineEditREPL})
precompile(Tuple{VSCodeServer.var"#1#3", REPL.LineEditREPL})
precompile(Tuple{Plots.var"#293#329", REPL.LineEditREPL})
precompile(Tuple{OhMyREPL.var"#1#4", REPL.LineEditREPL})
precompile(Tuple{REPL.var"##setup_interface#73", Bool, Any, typeof(REPL.setup_interface), REPL.LineEditREPL})
precompile(Tuple{REPL.LineEdit.var"#add_nested_key!##kw", Any, typeof(REPL.LineEdit.add_nested_key!), Base.Dict{K, V} where V where K, Union{Char, String}, Any})
precompile(Tuple{typeof(Base.getindex), Array{REPL.LineEdit.TextInterface, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Base.Dict{Any, Any}}, Base.Dict{Any, Any}, Base.Dict{Char, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Char, Any}, Char})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Char, Any}, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Function, String}}, String})
precompile(Tuple{typeof(Core.convert), Type{OhMyREPL.var"#2#5"{REPL.LineEdit.PrefixHistoryPrompt}}, OhMyREPL.var"#2#5"{REPL.LineEdit.PrefixHistoryPrompt}})
precompile(Tuple{typeof(Core.convert), Type{OhMyREPL.var"#3#6"{REPL.LineEdit.PrefixHistoryPrompt}}, OhMyREPL.var"#3#6"{REPL.LineEdit.PrefixHistoryPrompt}})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Pair{String, OhMyREPL.var"#2#5"{REPL.LineEdit.PrefixHistoryPrompt}}, Vararg{Pair{A, B} where B where A}})
precompile(Tuple{Pkg.var"#3#4", REPL.LineEditREPL})
precompile(Tuple{typeof(REPL.run_repl), REPL.AbstractREPL, Any})
precompile(Tuple{VSCodeServer.var"#55#56"})
precompile(Tuple{VSCodeServer.JSONRPC.var"#1#3"{VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}}})
precompile(Tuple{VSCodeServer.JSONRPC.var"#2#4"{VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}}})
precompile(Tuple{VSCodeServer.var"#154#158"{Bool, String, Base.PipeEndpoint}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.get_next_message), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}})
precompile(Tuple{VSCodeServer.var"#2#4"{REPL.LineEditREPL}})
precompile(Tuple{REPL.var"#49#54"{REPL.LineEditREPL, REPL.REPLBackendRef}})
precompile(Tuple{typeof(REPL.LineEdit.init_state), Any, REPL.LineEdit.PrefixHistoryPrompt})
precompile(Tuple{Type{REPL.LineEdit.PrefixSearchState}, Any, Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.run_interface), REPL.Terminals.TextTerminal, REPL.LineEdit.ModalInterface, REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.TextInterface, REPL.LineEdit.MIState, REPL.Terminals.AbstractTerminal, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{VSCodeServer.JSON.Parser.var"##parse#1", Type, Type{Int64}, typeof(VSCodeServer.JSON.Parser.parse), String})
precompile(Tuple{typeof(VSCodeServer.JSON.Parser.parse_value), VSCodeServer.JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64}, VSCodeServer.JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(VSCodeServer.JSON.Parser.skip!), VSCodeServer.JSON.Parser.MemoryParserState, UInt8, UInt8, Vararg{UInt8}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(VSCodeServer.dispatch_msg), Base.RefValue{Union{Nothing, VSCodeServer.JSONRPC.JSONRPCEndpoint{IOIn, IOOut} where IOOut<:IO where IOIn<:IO}}, VSCodeServer.JSONRPC.MsgDispatcher, Base.Dict{String, Any}, Bool})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.dispatch_msg), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, VSCodeServer.JSONRPC.MsgDispatcher, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.get), Base.Dict{String, VSCodeServer.JSONRPC.Handler}, String, Nothing})
precompile(Tuple{typeof(VSCodeServer.repl_getvariables_request), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Nothing})
precompile(Tuple{typeof(VSCodeServer.getvariables)})
precompile(Tuple{typeof(VSCodeServer.wsicon), Module})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Module})
precompile(Tuple{typeof(VSCodeServer.treerender), Module})
precompile(Tuple{typeof(Base.getproperty), VSCodeServer.ReplWorkspaceItem, Symbol})
precompile(Tuple{typeof(VSCodeServer.can_display), Module})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("juliavscode/html")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/png")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/gif")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Any})
precompile(Tuple{typeof(VSCodeServer.wsicon), Function})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Function})
precompile(Tuple{typeof(VSCodeServer.treerender), Function})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Function})
precompile(Tuple{typeof(VSCodeServer.can_display), Function})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_success_response), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, Array{VSCodeServer.ReplWorkspaceItem, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, Array{VSCodeServer.ReplWorkspaceItem, 1}}}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.json), Base.Dict{String, Any}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, Int64})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, String})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, Array{VSCodeServer.ReplWorkspaceItem, 1}})
precompile(Tuple{Type{VSCodeServer.JSON.Writer.CompositeTypeWrapper{T} where T}, VSCodeServer.ReplWorkspaceItem, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, Symbol, String})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, Symbol, Int64})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, Symbol, Bool})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, VSCodeServer.JSONRPC.var"#5#6", Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Generator{Base.Dict{String, Any}, VSCodeServer.JSONRPC.var"#5#6"}})
precompile(Tuple{Type{NamedTuple{(:mod,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:mod,), Tuple{String}}})
precompile(Tuple{typeof(Base.convert), Type{NamedTuple{(:mod,), Tuple{String}}}, NamedTuple{(:mod,), Tuple{String}}})
precompile(Tuple{typeof(VSCodeServer.repl_isModuleLoaded_request), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, NamedTuple{(:mod,), Tuple{String}}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_success_response), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, Bool})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, Bool}}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, Bool})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.write_transport_layer), Base.PipeEndpoint, String})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#7#34", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#7#34", Any, Any, Any})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(REPL.Terminals.cmove_up), REPL.Terminals.TerminalBuffer})
precompile(Tuple{typeof(Base.Unicode.textwidth), String})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Tokenize.Lexers.lex_whitespace), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{OhMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.BracketHighlighter.BracketHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.RainbowBrackets.RainbowBracketsSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.untokenize_with_ANSI), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, OhMyREPL.PassHandler, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.Prompt.refresh_multi_line), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.position), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.seek), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{Base.var"#readline##kw", NamedTuple{(:keep,), Tuple{Bool}}, typeof(Base.readline), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.:(+)), Int64, Bool})
precompile(Tuple{typeof(Base.max), Int64, Int64})
precompile(Tuple{typeof(Base.divrem), Int64, Int64})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.BracketInserter.var"#6#13"{Array{Char, 1}, Array{Char, 1}}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#6#13"{Array{Char, 1}, Array{Char, 1}}, REPL.LineEdit.MIState, REPL.LineEditREPL, String})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), REPL.LineEdit.MIState, Any})
precompile(Tuple{VSCodeServer.var"#157#161"{VSCodeServer.JSONRPC.MsgDispatcher, Base.Dict{String, Any}, Bool}})
precompile(Tuple{Type{VSCodeServer.ReplRunCodeRequestParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{String}, String})
precompile(Tuple{Type{Bool}, Bool})
precompile(Tuple{typeof(VSCodeServer.repl_runcode_request), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, VSCodeServer.ReplRunCodeRequestParams})
precompile(Tuple{typeof(VSCodeServer.run_with_backend), Function})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{VSCodeServer.var"#57#61"{VSCodeServer.ReplRunCodeRequestParams}, Tuple{}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{VSCodeServer.var"#57#61"{VSCodeServer.ReplRunCodeRequestParams}, Tuple{}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{VSCodeServer.var"#57#61"{VSCodeServer.ReplRunCodeRequestParams}, Tuple{}}, Int64, Int64})
precompile(Tuple{VSCodeServer.var"#57#61"{VSCodeServer.ReplRunCodeRequestParams}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_notification), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, String, Nothing})
precompile(Tuple{Base.var"##sprint#426", Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, Union{Nothing, String}}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Union{Nothing, String}}})
precompile(Tuple{typeof(Base.CoreLogging.min_enabled_level), Logging.ConsoleLogger})
precompile(Tuple{typeof(Base.min), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{VSCodeServer.var"#58#62"{Bool, Bool, Bool, Module, String, Int64, Int64, String, VSCodeServer.ReplRunCodeRequestParams}})
precompile(Tuple{typeof(Base.getproperty), REPL.LineEdit.MIState, Symbol})
precompile(Tuple{Type{Base.Dict{Tuple{Revise.PkgData, String}, Nothing}}})
precompile(Tuple{typeof(Base.include_string), typeof(REPL.softscope), Module, String, String})
precompile(Tuple{typeof(UnitfulAngles.__init__)})
precompile(Tuple{typeof(Unitful._basefactors), Module})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(TimeZones.__init__)})
precompile(Tuple{Type{Dates.DatePart{Char(0x7a000000)}}, Int64, Bool})
precompile(Tuple{Type{Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.ssszzz"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.DatePart{Char(0x7a000000)}}}}, Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.DatePart{Char(0x7a000000)}}, Dates.DateLocale})
precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
precompile(Tuple{typeof(VSCodeServer.on_pkg_load), Base.PkgId})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(FFTW.spawnloop), Ptr{Nothing}, Ptr{Nothing}, UInt64, Int32, Ptr{Nothing}})
precompile(Tuple{typeof(FFTW.__init__)})
precompile(Tuple{typeof(FastTransforms.__init__)})
precompile(Tuple{typeof(Base.ceil), Type{Int64}, Float64})
precompile(Tuple{typeof(FastTransforms.ft_set_num_threads), Int64})
precompile(Tuple{typeof(FastTransforms.ft_fftw_plan_with_nthreads), Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, ColorSchemes.ColorScheme{V, S1, S2} where S2<:AbstractString where S1<:AbstractString where V<:(AbstractArray{var"#s1", 1} where var"#s1"<:(ColorTypes.Colorant{T, N} where N where T))}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, ColorSchemes.ColorScheme{V, S1, S2} where S2<:AbstractString where S1<:AbstractString where V<:(AbstractArray{var"#s1", 1} where var"#s1"<:(ColorTypes.Colorant{T, N} where N where T))}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, ColorSchemes.ColorScheme{V, S1, S2} where S2<:AbstractString where S1<:AbstractString where V<:(AbstractArray{var"#s1", 1} where var"#s1"<:(ColorTypes.Colorant{T, N} where N where T))}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, ColorSchemes.ColorScheme{V, S1, S2} where S2<:AbstractString where S1<:AbstractString where V<:(AbstractArray{var"#s1", 1} where var"#s1"<:(ColorTypes.Colorant{T, N} where N where T))}, ColorSchemes.ColorScheme{Array{ColorTypes.RGB{Float64}, 1}, String, String}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, ColorSchemes.ColorScheme{V, S1, S2} where S2<:AbstractString where S1<:AbstractString where V<:(AbstractArray{var"#s1", 1} where var"#s1"<:(ColorTypes.Colorant{T, N} where N where T))}, Int64})
precompile(Tuple{typeof(Plots.gr)})
precompile(Tuple{Type{NamedTuple{(:dpi, :fontfamily), T} where T<:Tuple}, Tuple{Int64, String}})
precompile(Tuple{Plots.var"#default##kw", NamedTuple{(:dpi, :fontfamily), Tuple{Int64, String}}, typeof(Plots.default)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, FITSIO.HDU}, FITSIO.ImageHDU{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.read), FITSIO.ImageHDU{Float64, 2}})
precompile(Tuple{typeof(FITSIO.read_header), FITSIO.ImageHDU{Float64, 2}})
precompile(Tuple{typeof(Base.:(==)), Bool, String})
precompile(Tuple{typeof(Base.:(==)), Int64, String})
precompile(Tuple{typeof(Base.:(==)), Float64, String})
precompile(Tuple{typeof(FITSIO.hdrval_repr), Int64})
precompile(Tuple{typeof(FITSIO.hdrval_repr), Float64})
precompile(Tuple{typeof(CFITSIO.fits_close_file), CFITSIO.FITSFile})
precompile(Tuple{typeof(Base.unsafe_load), Ptr{Float64}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Tuple{Float64, Float64}, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Int64, Int64}, Float64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{Tuple{Float64, Float64}, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Int64, Int64}, Float64}}}}, Tuple{Int64, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{Tuple{Float64, Float64}, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Int64, Int64}, Float64}}}}, Tuple{Int64, Int64}}}, Float64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(-)), Tuple{Tuple{Float64, Float64}, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Int64, Int64}, Float64}}}}, Tuple{Int64, Int64}}}, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Tuple{Float64, Float64}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Tuple{Float64, Float64}, Tuple{Int64, Int64}}}})
precompile(Tuple{Type{NamedTuple{(:clim,), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(ColorTypes.basetype), Any})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{typeof(Base.typename), UnionAll})
precompile(Tuple{typeof(Base.supertype), UnionAll})
precompile(Tuple{typeof(Base.supertype), DataType})
precompile(Tuple{typeof(ColorTypes._eltypes_supported), Type{var"#s52"} where var"#s52"<:(ColorTypes.Colorant{T, N} where N where T), Type{C}} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(ColorTypes._eltypes_supported), Type{C}, Type} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(ColorTypes._parameter_upper_bound), UnionAll, Any})
precompile(Tuple{typeof(ColorTypes._parameter_upper_bound), UnionAll, Int64})
precompile(Tuple{Plots.var"##plot#143", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(RecipesBase.plot), Any})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol}, NamedTuple{(:clim,), Tuple{Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend, Int64, RecipesPipeline.DefaultsDict, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{typeof(RecipesPipeline.recipe_pipeline!), Any, Any, Any})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Base.copy), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.append!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.is_subplot_attribute), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(RecipesPipeline.reset_kw!), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(RecipesPipeline.is_axis_attribute), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(RecipesBase.is_explicit), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.size), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Float64}, Symbol})
precompile(Tuple{typeof(Base.adjoint), Array{Float64, 2}})
precompile(Tuple{typeof(RecipesBase.wrap_tuple), LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Any})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Any})
precompile(Tuple{typeof(Base.prepend!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, AbstractArray{T, 2} where T})
precompile(Tuple{typeof(RecipesPipeline.is3d), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.is3d), Symbol})
precompile(Tuple{typeof(Base.axes), LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Int64, Int64})
precompile(Tuple{Type{RecipesPipeline.Surface{M} where M<:(AbstractArray{T, 2} where T)}, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Any, Any, Any})
precompile(Tuple{typeof(RecipesPipeline.wrap_surfaces!), Any, AbstractArray{T, 1} where T, AbstractArray{T, 1} where T, RecipesPipeline.Surface{M} where M<:(AbstractArray{T, 2} where T)})
precompile(Tuple{typeof(RecipesPipeline._apply_type_recipe), Any, AbstractArray{var"#s30", N} where N where var"#s30"<:Union{Base.Missing, AbstractFloat, AbstractString, Integer}, Any})
precompile(Tuple{typeof(RecipesPipeline._apply_type_recipe), Any, RecipesPipeline.Surface{var"#s30"} where var"#s30"<:(AbstractArray{var"#s21", 2} where var"#s21"<:Union{Base.Missing, AbstractFloat, AbstractString, Integer}), Any})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Any, Any, Any})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Base.OneTo{Int64}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), RecipesPipeline.Surface{LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.length), Array{Base.OneTo{Int64}, 1}})
precompile(Tuple{typeof(Base.length), Array{RecipesPipeline.Surface{Array{Float64, 2}}, 1}})
precompile(Tuple{typeof(Base.mod1), Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Base.OneTo{Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{RecipesPipeline.Surface{Array{Float64, 2}}, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Base.OneTo{Int64}, Base.OneTo{Int64}, RecipesPipeline.Surface{Array{Float64, 2}}, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.OneTo{Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, RecipesPipeline.Surface{Array{Float64, 2}}, Symbol})
precompile(Tuple{Type{RecipesBase.RecipeData}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{typeof(RecipesPipeline._finish_userrecipe!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, RecipesBase.RecipeData})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.wraptuple), Bool})
precompile(Tuple{typeof(Plots.processGridArg!), Base.Dict{Symbol, Any}, Bool, Symbol})
precompile(Tuple{typeof(Base.:(==)), Symbol, Bool})
precompile(Tuple{typeof(Base.:(==)), String, Bool})
precompile(Tuple{typeof(Base.:(==)), Nothing, Bool})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Plots.convertLegendValue), Bool})
precompile(Tuple{typeof(RecipesPipeline._filter_input_data!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.process_userrecipe!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Symbol})
precompile(Tuple{typeof(RecipesPipeline._process_plotrecipes!), Any, Any})
precompile(Tuple{typeof(Base.isempty), Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.popfirst!), Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(RecipesPipeline._process_plotrecipe), Any, Any, Any, Any})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Nothing})
precompile(Tuple{typeof(Base.push!), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.plot_setup!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Bool, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Int64, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, String, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.isdark), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setproperty!), Plots.Plot{Plots.GRBackend}, Symbol, Nothing})
precompile(Tuple{typeof(Plots.build_layout), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.layout_args), Int64})
precompile(Tuple{Type{Plots.GridLayout}, Int64, Vararg{Int64}})
precompile(Tuple{Plots.var"##GridLayout#164", Plots.RootLayout, Array{Float64, 1}, Array{Float64, 1}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.GridLayout}, Int64, Vararg{Int64}})
precompile(Tuple{Type{Array{RecipesBase.AbstractLayout, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{Type{Measures.Length{:pct, Float64}}, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots.build_layout), Plots.GridLayout, Int64, Array{Plots.Plot{T} where T<:RecipesBase.AbstractBackend, 1}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Nothing, Symbol})
precompile(Tuple{typeof(Plots._cycle), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Plots.get_subplot), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(==)), String, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.merge), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Plots.Font, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.GRBackend}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Plots.convertLegendValue), Symbol})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Symbol, Int64})
precompile(Tuple{typeof(PlotUtils.get_colorscheme), Symbol})
precompile(Tuple{Type{PlotUtils.ColorPalette}, ColorSchemes.ColorScheme{Array{ColorTypes.RGB{Float64}, 1}, String, String}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Pair{Symbol, Symbol}, Vararg{Pair{A, B} where B where A}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Extrema, Symbol})
precompile(Tuple{Type{Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}}, Array{Plots.Subplot{Plots.GRBackend}, 1}})
precompile(Tuple{typeof(Plots.slice_arg), Function, Int64})
precompile(Tuple{typeof(Plots.slice_arg), Bool, Int64})
precompile(Tuple{typeof(Plots.slice_arg), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Plots.slice_arg), Symbol, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Any})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Any, Nothing}, Any, Any})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Function, Symbol})
precompile(Tuple{Type{NamedTuple{(:grid, :tick_direction, :minorticks), T} where T<:Tuple}, Tuple{Bool, Symbol, Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:grid, :tick_direction, :minorticks), Tuple{Bool, Symbol, Bool}}})
precompile(Tuple{Plots.var"#attr!##kw", NamedTuple{(:grid, :tick_direction, :minorticks), Tuple{Bool, Symbol, Bool}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Plots._update_subplot_legend), Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.getproperty), Plots.Font, Symbol})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Float64})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{Type{NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), T} where T<:Tuple}, Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}, NamedTuple{(), Tuple{}}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#43#44", Type, Type, Type, Type, Type})
precompile(Tuple{Plots.var"#font##kw", NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}, typeof(Plots.font)})
precompile(Tuple{typeof(Base.parse), Type{ColorTypes.Colorant{T, N} where N where T}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{Type{Plots.Font}, String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(RecipesPipeline._process_seriesrecipes!), Any, Any})
precompile(Tuple{typeof(Base.iterate), Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(RecipesPipeline.slice_series_attributes!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Base.Dict{Symbol, Any}, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline.process_sliced_series_attributes!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.findall), Function, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Plots.var"#155#156", Tuple{Array{Base.Dict{Symbol, Any}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Plots.var"#155#156", Tuple{Array{Base.Dict{Symbol, Any}, 1}}}})
precompile(Tuple{typeof(RecipesPipeline.series_defaults), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesPipeline._process_seriesrecipe), Any, Any})
precompile(Tuple{typeof(RecipesPipeline.is_seriestype_supported), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(RecipesPipeline.add_series!), Plots.Plot{Plots.GRBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base.convert), Type{Symbol}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{Plots.GRBackend}}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(PlotUtils.get_color_palette), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.:(==)), Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.:(==)), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots.heatmap_edges), Base.OneTo{Int64}, Symbol})
precompile(Tuple{typeof(Base.identity), Float64})
precompile(Tuple{typeof(Base._similar_for), Base.OneTo{Int64}, Type{Float64}, Base.Generator{Base.OneTo{Int64}, RecipesPipeline.var"#7#8"{Symbol}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.OneTo{Int64}, RecipesPipeline.var"#7#8"{Symbol}}, Int64})
precompile(Tuple{typeof(Plots._heatmap_edges), Array{Float64, 1}, Bool, Bool})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(*)), Float64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.__cat_offset!), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, Float64, Array{Float64, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.__cat_offset!), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, RecipesPipeline.var"#9#10"{Symbol}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, RecipesPipeline.var"#9#10"{Symbol}}})
precompile(Tuple{typeof(Base._similar_for), Array{Float64, 1}, Type{Float64}, Base.Generator{Array{Float64, 1}, RecipesPipeline.var"#9#10"{Symbol}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, RecipesPipeline.var"#9#10"{Symbol}}, Int64})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), Symbol})
precompile(Tuple{Type{ErrorException}, String})
precompile(Tuple{typeof(PlotUtils.is_colorscheme), Symbol})
precompile(Tuple{typeof(PlotUtils.cgrad), ColorSchemes.ColorScheme{Array{ColorTypes.RGB{Float64}, 1}, String, String}})
precompile(Tuple{typeof(Base._linspace), Type{Float64}, Int64, Int64, Int64, Int64})
precompile(Tuple{PlotUtils.var"##cgrad#16", Nothing, Nothing, Bool, Nothing, typeof(PlotUtils.cgrad), ColorSchemes.ColorScheme{Array{ColorTypes.RGB{Float64}, 1}, String, String}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(PlotUtils.prepare_continuous_cgrad_colors), ColorSchemes.ColorScheme{Array{ColorTypes.RGB{Float64}, 1}, String, String}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, PlotUtils.ContinuousColorGradient, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, String, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.label_to_string), Tuple{Base.RefValue{String}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Plots.label_to_string), Tuple{Base.RefValue{String}, Int64}}})
precompile(Tuple{typeof(Base.:(==)), Float64, Symbol})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Iterators.Flatten{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}, Int64})
precompile(Tuple{typeof(Base.iterate), RecipesPipeline.DefaultsDict, Tuple{Array{Symbol, 1}, Int64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Nothing})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, PlotUtils.ContinuousColorGradient})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Base.OneTo{Int64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Bool, Bool})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.:(!=)), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Plots.is_style_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.is_marker_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.update_clims), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Plots.process_clims), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.update_clims), Plots.Subplot{Plots.GRBackend}, Function})
precompile(Tuple{typeof(Plots.update_clims), Float64, Float64, RecipesPipeline.Surface{Array{Float64, 2}}, Function})
precompile(Tuple{typeof(Plots.update_clims), Float64, Float64, Array{Float64, 2}, Base.ComposedFunction{Plots.var"#70#71"{Tuple{Int64, Int64}}, typeof(Plots.ignorenan_extrema)}})
precompile(Tuple{typeof(Base.:(==)), Bool, Symbol})
precompile(Tuple{typeof(Plots._do_plot_show), Plots.Plot{Plots.GRBackend}, Bool})
precompile(Tuple{typeof(Base.findlast), Function, Base.SubString{String}})
precompile(Tuple{typeof(Base.findprev), Base.Fix2{typeof(Base.isequal), Char}, Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), VSCodeServer.InlineDisplay, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.julia-vscode.diagnostics")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("juliavscode/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.display), VSCodeServer.InlineDisplay, String, Any})
precompile(Tuple{typeof(Base.Multimedia.display), VSCodeServer.InlineDisplay, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Base64.var"##base64encode#5", Nothing, typeof(Base64.base64encode), Function, Base.Multimedia.MIME{Symbol("image/png")}, Vararg{Any}})
precompile(Tuple{typeof(Base.show), Base64.Base64EncodePipe, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.:(*)), Int64, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{Measures.Length{:mm, Float64}}, Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.setproperty!), Plots.GridLayout, Symbol, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.convert), Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots._update_min_padding!), Plots.GridLayout})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base.:(==)), Int64, Symbol})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots._transform_ticks), Symbol})
precompile(Tuple{typeof(Base.:(==)), Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.GRBackend}, Symbol, Bool, Bool})
precompile(Tuple{typeof(Base.getproperty), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.:(<=)), Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Base.:(==)), Function, Symbol})
precompile(Tuple{typeof(Plots.get_ticks), Symbol, Array{Float64, 1}, Array{Any, 1}, Tuple{Int64, Int64}, Vararg{Any}})
precompile(Tuple{typeof(Plots.optimal_ticks_and_labels), Nothing, Tuple{Int64, Int64}, Symbol, Function})
precompile(Tuple{PlotUtils.var"#optimize_ticks##kw", NamedTuple{(:k_min, :k_max, :scale), Tuple{Int64, Int64, Symbol}}, typeof(PlotUtils.optimize_ticks), Float64, Float64})
precompile(Tuple{Type{Float64}, Float64})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Float64, Float64}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Float64, Float64}, 1}, Tuple{Float64, Float64}, Base.Generator{Array{Tuple{Float64, Float64}, 1}, PlotUtils.var"#43#44"{DataType}}, Int64})
precompile(Tuple{typeof(PlotUtils.optimize_ticks_typed), Float64, Float64, Bool, Array{Tuple{Float64, Float64}, 1}, Int64, Int64, Int64, Float64, Float64, Float64, Float64, Bool, Nothing, Symbol})
precompile(Tuple{Type{Int64}, Float64})
precompile(Tuple{typeof(Base.isinteger), Float64})
precompile(Tuple{typeof(Base.:(^)), Float64, Int64})
precompile(Tuple{typeof(Base.:(*)), Int64, Float64})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{typeof(Base.:(<)), Float64, Float64})
precompile(Tuple{typeof(Base.isfinite), Float64})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{PlotUtils.var"#46#51"{Int64, PlotUtils.var"#sigdigits#50"{Int64, Int64}}, Float64})
precompile(Tuple{PlotUtils.var"#sigdigits#50"{Int64, Int64}, Int64})
precompile(Tuple{Type{NamedTuple{(:sigdigits, :base), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{Base.var"#round##kw", NamedTuple{(:sigdigits, :base), Tuple{Int64, Int64}}, typeof(Base.round), Float64})
precompile(Tuple{typeof(Base.abs), Int64})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(+)), Float64, Float64})
precompile(Tuple{typeof(Base.:(-)), Float64, Int64})
precompile(Tuple{typeof(Base.:(>=)), Float64, Float64})
precompile(Tuple{typeof(Base.isinf), Float64})
precompile(Tuple{typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{Base.var"##any#749", Function, typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.isfinite), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.convert), Type{Ptr{UInt8}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.:(+)), Ptr{UInt8}, Int64})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Array{Float64, 1}, Array{String, 1}}, Symbol})
precompile(Tuple{typeof(Base.first), Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.isempty), Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:rotation, :color), T} where T<:Tuple}, Tuple{Int64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{Plots.var"#gr_set_font##kw", NamedTuple{(:rotation, :color), Tuple{Int64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.get_thickness_scaling), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(/)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.get_size), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.maximum), Tuple{Int64, Float64}})
precompile(Tuple{typeof(GR.setcharheight), Float64})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Module, Base.PkgId}, Any, Any})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Ptr{Nothing}}, Ptr{Nothing}})
precompile(Tuple{typeof(GR.js.send), Base.Cstring, Int32})
precompile(Tuple{typeof(GR.js.recv), Base.Cstring, Int32, Base.Cstring})
precompile(Tuple{typeof(GR.init), Bool})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Bool}})
precompile(Tuple{typeof(Plots.gr_get_ticks_size), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(GR.inqtext), Int64, Int64, String})
precompile(Tuple{typeof(Base.vect), Measures.Length{:mm, Float64}, Vararg{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.:(*)), Int64, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Tuple}, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.HasShape{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.leftpad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base._maximum), Array{Measures.Length{:mm, Float64}, 1}, Base.Colon})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.toppad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.rightpad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.bottompad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.HasShape{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.HasShape{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.HasShape{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.HasShape{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{Base.var"#maximum##kw", NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, Base._InitialValue, Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Base.MappingRF{_A, Base.BottomRF{typeof(Base.min)}} where _A, Int64}}})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{Base.var"##mapfoldl#244", Base._InitialValue, typeof(Base.mapfoldl), Function, Function, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), Base._InitialValue, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base._realtype), Function, Type})
precompile(Tuple{typeof(Base.reducedim_initarray), Array{Measures.Length{:mm, Float64}, 2}, Int64, Measures.Length{:mm, Float64}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.mapreducedim!), Function, Function, Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.max), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.convert), Type{Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.getindex), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.last), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.:(+)), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.sum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(/)), Measures.Length{:pct, Float64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Measure, 1}, Measures.Length{:pct, Float64}, Int64})
precompile(Tuple{typeof(Base.:(*)), Measures.Length{:mm, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Plots.plotarea!), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.bbox!), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(GR.inqdspsize)})
precompile(Tuple{typeof(Base.:(>)), Int64, Float64})
precompile(Tuple{typeof(Base.float), Float64})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(Base.:(*)), Float64, Int64, Float64})
precompile(Tuple{typeof(GR.setwsviewport), Int64, Float64, Int64, Float64})
precompile(Tuple{typeof(GR.setwswindow), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Plots.gr_fill_viewport), Array{Float64, 1}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(GR.fillrect), Float64, Float64, Float64, Float64})
precompile(Tuple{Base.Cartesian.var"#@ncall", LineNumberNode, Module, Int64, Any, Vararg{Any}})
precompile(Tuple{typeof(Plots.gr_display), Plots.Subplot{Plots.GRBackend}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_viewport_from_bbox), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Plots.Series, 1}, Plots.var"#74#75"}, Base.Colon})
precompile(Tuple{typeof(Base.:(/)), Bool, Int64})
precompile(Tuple{typeof(Base.:(+)), Int64, Float64})
precompile(Tuple{typeof(Base.:(==)), Plots.Font, Symbol})
precompile(Tuple{Plots.var"##gr_set_font#395", Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Symbol, Int64})
precompile(Tuple{Type{NamedTuple{(:w, :h, :dy, :leftw, :textw, :rightw, :xoffset, :yoffset, :width_factor), T} where T<:Tuple}, Tuple{Int64, Int64, Int64, Float64, Int64, Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_update_viewport_legend!), Array{Float64, 1}, Plots.Subplot{Plots.GRBackend}, NamedTuple{(:w, :h, :dy, :leftw, :textw, :rightw, :xoffset, :yoffset, :width_factor), Tuple{Int64, Int64, Int64, Float64, Int64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(GR.setviewport), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Plots.Series, 1}, Plots.var"#159#160"}, Base.Colon})
precompile(Tuple{typeof(GR.setwindow), Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(GR.setlinewidth), Int64})
precompile(Tuple{typeof(Plots.get_minor_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.in), Bool, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Real}, Symbol, Nothing})
precompile(Tuple{typeof(Base.:(>)), Bool, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Float64}})
precompile(Tuple{typeof(Base.lastindex), Array{Float64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Float64, 1}}, Tuple{Int64}})
precompile(Tuple{Base.Colon, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.collect), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(Base.append!), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Float64, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(<=)), Tuple{Int64, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(<=)), Tuple{Array{Float64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Int64, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{Float64, 1}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Int64, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{Float64, 1}, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Int64, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{Float64, 1}, Int64}}}}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{Plots.var"#add_major_or_minor_segments#104"{Plots.Subplot{Plots.GRBackend}, RecipesPipeline.var"#9#10"{Symbol}, RecipesPipeline.var"#7#8"{Symbol}, Int64, Int64, Plots.Segments{Tuple{Float64, Float64}}, Int64, Int64, Plots.Axis, Bool}, Array{Float64, 1}, Bool, Plots.Segments{Tuple{Float64, Float64}}, Float64, Bool})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Float64, Int64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.:(∉)), Bool, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{Type{NamedTuple{(:ticks, :segments, :tick_segments, :grid_segments, :minorgrid_segments, :border_segments), T} where T<:Tuple}, Tuple{Tuple{Array{Float64, 1}, Array{String, 1}}, Plots.Segments{Tuple{Float64, Float64}}, Plots.Segments{Tuple{Float64, Float64}}, Plots.Segments{Tuple{Float64, Float64}}, Plots.Segments{Tuple{Float64, Float64}}, Plots.Segments{Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Plots.gr_draw_grid), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Plots.gr_draw_grid), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}, Function})
precompile(Tuple{typeof(Plots.gr_draw_minorgrid), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Plots.gr_draw_minorgrid), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}, Function})
precompile(Tuple{typeof(Plots.gr_draw_spine), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Plots.gr_draw_spine), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}, Function})
precompile(Tuple{typeof(Plots.gr_set_line), Int64, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.min), Int64, Float64})
precompile(Tuple{typeof(Base.max), Int64, Float64})
precompile(Tuple{typeof(GR.setlinewidth), Float64})
precompile(Tuple{typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_draw_border), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Plots.gr_draw_border), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}, Function})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64})
precompile(Tuple{typeof(Plots.gr_draw_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Plots.gr_draw_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}, Function})
precompile(Tuple{typeof(Plots.gr_label_ticks), Plots.Subplot{Plots.GRBackend}, Symbol, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.floor), Float64})
precompile(Tuple{typeof(Base.iseven), Int64})
precompile(Tuple{typeof(GR.wctondc), Float64, Int64})
precompile(Tuple{typeof(Plots.gr_text), Float64, Float64, String})
precompile(Tuple{typeof(GR.text), Float64, Float64, String})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Int64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(GR.wctondc), Int64, Float64})
precompile(Tuple{typeof(Plots.gr_set_gradient), PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(Base.get), PlotUtils.ContinuousColorGradient, Float64, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.getindex), ColorSchemes.ColorScheme{Array{ColorTypes.RGBA{Float64}, 1}, String, String}, Int64})
precompile(Tuple{typeof(ColorTypes.red), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(ColorTypes.green), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(ColorTypes.blue), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(GR.setcolorrep), Int64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.getindex), ColorSchemes.ColorScheme{Array{ColorTypes.RGBA{Float64}, 1}, String, String}, Float64})
precompile(Tuple{typeof(Plots.handle_surface), Base.OneTo{Int64}})
precompile(Tuple{Base.var"##s859#532", Any, Any, Any, Any, Any, Any})
precompile(Tuple{Base.Cartesian.var"#@ntuple", LineNumberNode, Module, Int64, Any})
precompile(Tuple{Base.Cartesian.var"#@nloops", LineNumberNode, Module, Any, Any, Any, Vararg{Any}})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Symbol, Expr, Vararg{Expr}})
precompile(Tuple{typeof(Plots.handle_surface), RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots.gr_clims), Plots.Subplot{Plots.GRBackend}, Vararg{Any}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Float64, Float64}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Float64, Float64}}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.size), Array{Float64, 2}})
precompile(Tuple{typeof(Base.reverse), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.heatmap_edges), Base.OneTo{Int64}, Symbol, Base.OneTo{Int64}, Symbol, Tuple{Int64, Int64}, Bool})
precompile(Tuple{typeof(Plots.gr_draw_heatmap), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots._as_gradient), PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(Statistics._mean), typeof(Base.identity), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.get), PlotUtils.ContinuousColorGradient, Array{Float64, 2}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base._similar_for), Array{Float64, 2}, Type{ColorTypes.RGBA{Float64}}, Base.Generator{Array{Float64, 2}, PlotUtils.var"#6#7"{PlotUtils.ContinuousColorGradient}}, Base.HasShape{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{ColorTypes.RGBA{Float64}, 2}, ColorTypes.RGBA{Float64}, Base.Generator{Array{Float64, 2}, PlotUtils.var"#6#7"{PlotUtils.ContinuousColorGradient}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{ColorTypes.RGBA{Float64}, 2}, Nothing})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(PlotUtils.plot_color), Tuple{Array{ColorTypes.RGBA{Float64}, 2}, Base.RefValue{Nothing}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(PlotUtils.plot_color), Tuple{Array{ColorTypes.RGBA{Float64}, 2}, Base.RefValue{Nothing}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{ColorTypes.RGBA{Float64}, 2}, Array{Float64, 2}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{ColorTypes.RGBA{Float64}, 2}, Array{Float64, 2}}, Int64, Int64})
precompile(Tuple{typeof(Base.eachindex), Array{ColorTypes.RGBA{Float64}, 2}})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.isnan), Float64})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{ColorTypes.RGBA{Float64}, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.gr_color), Tuple{Array{ColorTypes.RGBA{Float64}, 2}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Plots.gr_color), Tuple{Array{ColorTypes.RGBA{Float64}, 2}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Plots.gr_color), Tuple{Array{ColorTypes.RGBA{Float64}, 2}}}})
precompile(Tuple{typeof(GR.drawimage), Float64, Float64, Float64, Float64, Int64, Int64, Array{UInt32, 2}})
precompile(Tuple{typeof(Base.ntuple), Base.var"#61#62"{Tuple{Int64, Int64, Int64, Int64}, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(GR.setwindow), Int64, Int64, Float64, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.get_colorgradient), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.get_colorgradient), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_colorgradient), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{PlotUtils.ContinuousColorGradient}})
precompile(Tuple{typeof(Base.setindex!), Array{PlotUtils.ContinuousColorGradient, 1}, PlotUtils.ContinuousColorGradient, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{PlotUtils.ContinuousColorGradient, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_colorgradient), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots._cbar_unique), Array{PlotUtils.ContinuousColorGradient, 1}, String})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{PlotUtils.ContinuousColorGradient, 1}, Plots.var"#396#397"{PlotUtils.ContinuousColorGradient}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), PlotUtils.ContinuousColorGradient, PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(Base.:(==)), Array{ColorTypes.RGBA{Float64}, 1}, Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.get_fillalpha), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.get_fillalpha), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Plots.get_fillalpha), Plots.Series})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_fillalpha), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Nothing}})
precompile(Tuple{typeof(Base.setindex!), Array{Nothing, 1}, Nothing, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Nothing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_fillalpha), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots._cbar_unique), Array{Nothing, 1}, String})
precompile(Tuple{typeof(GR.cellarray), Int64, Int64, Float64, Float64, Int64, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.convert), Type{ColorTypes.RGBA{Float64}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(GR.axes), Int64, Float64, Int64, Float64, Int64, Int64, Float64})
precompile(Tuple{typeof(Plots.text), String, Plots.Font})
precompile(Tuple{typeof(Base.getproperty), Plots.PlotText, Symbol})
precompile(Tuple{typeof(Plots.gr_add_legend), Plots.Subplot{Plots.GRBackend}, NamedTuple{(:w, :h, :dy, :leftw, :textw, :rightw, :xoffset, :yoffset, :width_factor), Tuple{Int64, Int64, Int64, Float64, Int64, Float64, Float64, Float64, Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.unsafe_write), Base.GenericIOBuffer{Array{UInt8, 1}}, Ptr{UInt8}, Int64})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8, UInt8, Vararg{UInt8}})
precompile(Tuple{Type{Base.Dict{String, Any}}, Pair{String, String}, Vararg{Pair{String, String}}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_notification), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, String, Base.Dict{String, Any}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.flush), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}})
precompile(Tuple{typeof(Revise.revise_file_queued), Revise.PkgData, String})
precompile(Tuple{typeof(VSCodeServer.safe_render), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{VSCodeServer.var"##sprintlimited#17", Function, Int64, String, Bool, typeof(VSCodeServer.sprintlimited), Base.Multimedia.MIME{Symbol("text/plain")}, Vararg{Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{VSCodeServer.LimitIO{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Plots.GRBackend})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type})
precompile(Tuple{typeof(Base._show_type), Base.GenericIOBuffer{Array{UInt8, 1}}, Type})
precompile(Tuple{Type{Base.ImmutableDict{Symbol, Any}}, Base.ImmutableDict{Symbol, Any}, Symbol, Plots.GRBackend})
precompile(Tuple{Type{Base.ImmutableDict{Symbol, Any}}, Base.ImmutableDict{Symbol, Any}, Symbol, Type})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getindex), Tuple{Base.Broadcast.Extruded{Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type{Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Dict{Any, Any}, 1}, Base.Dict{Any, Any}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Base.Dict{Any, Any}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getindex), Tuple{Base.Broadcast.Extruded{Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getindex), Tuple{Base.Broadcast.Extruded{Array{Plots.Series, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type{Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Base.Dict{Symbol, Any}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getindex), Tuple{Base.Broadcast.Extruded{Array{Plots.Series, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.isempty), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.all), Function, Array{Base.Dict{Any, Any}, 1}})
precompile(Tuple{Base.var"##all#751", Function, typeof(Base.all), Function, Array{Base.Dict{Any, Any}, 1}})
precompile(Tuple{typeof(Base._all), typeof(Base.isempty), Array{Base.Dict{Any, Any}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.all), Function, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{Base.var"##all#751", Function, typeof(Base.all), Function, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base._all), typeof(Base.isempty), Array{Base.Dict{Symbol, Any}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.flush), Base.TTY})
precompile(Tuple{typeof(VSCodeServer.getvariables)})
precompile(Tuple{typeof(VSCodeServer.wsicon), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(VSCodeServer.treerender), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(VSCodeServer.can_display), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Function})
precompile(Tuple{Base.var"##sprint#426", Nothing, Int64, typeof(Base.sprint), Function, Tuple{Int64, Int64}, Vararg{Any}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Int64, Int64}, Char})
precompile(Tuple{typeof(Base.print_to_string), Type, Vararg{Any}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type})
precompile(Tuple{typeof(Base._show_type), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type})
precompile(Tuple{typeof(Base.println), Base.TTY})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:color, :bold), Tuple{Symbol, Bool}}, typeof(Base.printstyled), Base.TTY, String})
precompile(Tuple{typeof(VSCodeServer.unwrap), VSCodeServer.Wrapper})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_success_response), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, VSCodeServer.ReplRunCodeRequestReturn})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, VSCodeServer.ReplRunCodeRequestReturn}}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, VSCodeServer.ReplRunCodeRequestReturn})
precompile(Tuple{Type{VSCodeServer.JSON.Writer.CompositeTypeWrapper{T} where T}, VSCodeServer.ReplRunCodeRequestReturn, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, Symbol, Nothing})
precompile(Tuple{VSCodeServer.var"#157#161"{VSCodeServer.JSONRPC.MsgDispatcher, Base.Dict{String, Any}, Bool}})
precompile(Tuple{VSCodeServer.var"#57#61"{VSCodeServer.ReplRunCodeRequestParams}})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), Function, Any})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.CoreLogging.LogState})
precompile(Tuple{VSCodeServer.var"#58#62"{Bool, Bool, Bool, Module, String, Int64, Int64, String, VSCodeServer.ReplRunCodeRequestParams}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{S} where S<:Base.Broadcast.BroadcastStyle, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{Float64, Float64}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Tuple{Float64, Float64}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Tuple{Float64, Float64}, Float64}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Tuple{Float64, Float64}, Float64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.:(>=)), Float64, Int64})
precompile(Tuple{typeof(Base.:(<=)), Float64, Int64})
precompile(Tuple{typeof(Base.abs), Float64})
precompile(Tuple{typeof(Base.round), Type{Int64}, Float64})
precompile(Tuple{typeof(Base.zeros), Type{Float64}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.StepRange{Int64, Int64}, Base.StepRange{Int64, Int64}}, false}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.Broadcast.DefaultArrayStyle{2}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, false}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.StepRange{Int64, Int64}, Base.StepRange{Int64, Int64}}, false}}}})
precompile(Tuple{typeof(Base.first), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.last), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(/)), Base.Irrational{:π}, Float64})
precompile(Tuple{typeof(Base.getindex), Type{Int64}, Int64})
precompile(Tuple{typeof(Base.unique), Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.hcat), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.transpose), Array{Int64, 2}})
precompile(Tuple{Type{Array{T, 2} where T}, LinearAlgebra.Transpose{Int64, Array{Int64, 2}}})
precompile(Tuple{typeof(Base.maybeview), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.size), Array{Int64, 2}, Int64})
precompile(Tuple{typeof(Base.cconvert), Type, Int64})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Int64}}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Int64}}, Array{Int64, 2}})
precompile(Tuple{Type{FFTW.r2rFFTWPlan{Float64, (3,), true, 1, G} where G}, Ptr{FFTW.fftw_plan_struct}, UInt32, Base.UnitRange{Int64}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(FastTransforms.clenshawcurtisweights!), Array{Float64, 1}, FFTW.r2rFFTWPlan{Float64, (3,), true, 1, Base.UnitRange{Int64}}})
precompile(Tuple{FFTW.var"#2#3"{Ptr{Nothing}, Ptr{Nothing}, UInt64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Float64}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Float64}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Float64}}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Float64}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Float64}}, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Float64}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Float64}}, Int64}}}}})
precompile(Tuple{Type{NamedTuple{(:length,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Base.var"#range##kw", NamedTuple{(:length,), Tuple{Int64}}, typeof(Base.range), Int64, Base.Irrational{:π}})
precompile(Tuple{typeof(Base.getindex), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Float64}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Float64}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}})
precompile(Tuple{typeof(Base.length), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.fill), Float64, Int64})
precompile(Tuple{typeof(Base.fill), Int32, Int64})
precompile(Tuple{typeof(Base.ones), Type{Int32}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(*)), Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Base.StepRangeLen{Int64, Int64, Int64, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Int64}, Tuple{Base.StepRangeLen{Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Int64}, Tuple{Base.StepRangeLen{Int64, Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base.cconvert), Type, Int32})
precompile(Tuple{typeof(Base.cconvert), Type, Array{Int32, 1}})
precompile(Tuple{typeof(Base.convert), Type{Ref{Int32}}, Array{Int32, 1}})
precompile(Tuple{typeof(Base.cconvert), Type, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Ref{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.cconvert), Type, Array{Float64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Ref{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ref{Int32}}, Base.RefArray{Int32, Array{Int32, 1}, Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ref{Int64}}, Base.RefArray{Int64, Array{Int64, 1}, Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ref{Float64}}, Base.RefArray{Float64, Array{Float64, 1}, Nothing}})
precompile(Tuple{typeof(Libsharp.make_triangular_alm_info), Int64, Int64, Int64})
precompile(Tuple{Type{Healpix.Alm{T, AA} where AA<:AbstractArray{T, 1} where T<:Number}, Int64, Int64, Array{Base.Complex{Float64}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}, Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}, Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.prettyprint_getunits), Int64, Int64, Int64})
precompile(Tuple{typeof(Base.Ryu.writefixed), Float64, Int64})
precompile(Tuple{typeof(REPL.ends_with_semicolon), AbstractString})
precompile(Tuple{typeof(Base.lastindex), Base.SubString{String}})
precompile(Tuple{typeof(Base.getindex), Base.SubString{String}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.SubString{String}})
precompile(Tuple{typeof(Base.:(==)), Char, Char})
precompile(Tuple{typeof(Base.iterate), Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), VSCodeServer.InlineDisplay, Tuple{Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}, Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.julia-vscode.diagnostics")}, Any})
precompile(Tuple{Type{MethodError}, Any, Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Tuple{Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}, Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}}})
precompile(Tuple{typeof(Base.write), Base.TTY, String, String})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.TTY, Pair{Symbol, Bool}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, Tuple{Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}, Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Type})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.TTY}, Pair{Symbol, DataType}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Type})
precompile(Tuple{typeof(Base._show_type), Base.IOContext{Base.TTY}, Type})
precompile(Tuple{typeof(VSCodeServer.wsicon), Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}})
precompile(Tuple{typeof(VSCodeServer.treerender), Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}})
precompile(Tuple{typeof(VSCodeServer.can_display), Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}})
precompile(Tuple{typeof(VSCodeServer.wsicon), Tuple{Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}, Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}}})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Tuple{Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}, Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}}})
precompile(Tuple{typeof(VSCodeServer.treerender), Tuple{Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}, Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}}})
precompile(Tuple{typeof(VSCodeServer.can_display), Tuple{Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}, Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}}})
precompile(Tuple{Type{Base.ImmutableDict{Symbol, Any}}, Base.ImmutableDict{Symbol, Any}, Symbol, Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}})
precompile(Tuple{typeof(Base.length), Core.SimpleVector})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Array{Base.Complex{Float64}, 1}})
precompile(Tuple{typeof(Base.:(==)), Type, Nothing})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Int64})
precompile(Tuple{typeof(VSCodeServer.safe_render), Tuple{Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}, Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{VSCodeServer.LimitIO{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Tuple{Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}, Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{VSCodeServer.LimitIO{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Pair{Symbol, DataType}})
precompile(Tuple{typeof(Base.show), Base.IOContext{VSCodeServer.LimitIO{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Type})
precompile(Tuple{typeof(Base._show_type), Base.IOContext{VSCodeServer.LimitIO{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Type})
precompile(Tuple{typeof(Base.show), Base.IOContext{VSCodeServer.LimitIO{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Array{Base.Complex{Float64}, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{VSCodeServer.LimitIO{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_success_response), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, VSCodeServer.ReplRunCodeRequestReturn})
precompile(Tuple{typeof(CondaPkg.PkgREPL.__init__)})
precompile(Tuple{typeof(Base.getproperty), Markdown.MD, Symbol})
precompile(Tuple{typeof(Base.copy!), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(PythonCall.C._pyjl_callmethod), Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.PyObject}})
precompile(Tuple{typeof(PythonCall.C._pyjl_isnull), Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.PyObject}})
precompile(Tuple{typeof(PythonCall.C._pyjl_reduce), Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.PyObject}})
precompile(Tuple{typeof(PythonCall.C._pyjl_deserialize), Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.PyObject}})
precompile(Tuple{typeof(PythonCall.C._pyjl_get_buffer), Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.Py_buffer}, Int32})
precompile(Tuple{UnsafePointers.var"##s7#15", Any, Any, Any, Type, Any})
precompile(Tuple{UnsafePointers.var"##s5#13", Any, Any, Any, Type, Any})
precompile(Tuple{typeof(Base.findfirst), Base.Fix2{typeof(Base.:(==)), Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{UnsafePointers.var"##s7#14", Any, Any, Any, Type, Any})
precompile(Tuple{typeof(PythonCall.C._pyjl_release_buffer), Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.Py_buffer}})
precompile(Tuple{typeof(Base.findfirst), Base.Fix2{typeof(Base.:(==)), Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.findfirst), Base.Fix2{typeof(Base.:(==)), Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(PythonCall.C._pyjl_new), Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.PyObject}})
precompile(Tuple{typeof(PythonCall.C._pyjl_dealloc), Ptr{PythonCall.C.PyObject}})
precompile(Tuple{typeof(PythonCall.C._atpyexit)})
precompile(Tuple{typeof(PythonCall.C.__init__)})
precompile(Tuple{typeof(CondaPkg.envdir)})
precompile(Tuple{typeof(CondaPkg.resolve)})
precompile(Tuple{CondaPkg.var"##resolve#17", Bool, IO, Bool, Bool, typeof(CondaPkg.resolve)})
precompile(Tuple{typeof(Base.getproperty), CondaPkg.State, Symbol})
precompile(Tuple{typeof(Base.setproperty!), CondaPkg.State, Symbol, Bool})
precompile(Tuple{typeof(Base.setproperty!), CondaPkg.State, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{String, 1}}, Array{String, 1}})
precompile(Tuple{typeof(CondaPkg._resolve_top_env), Any})
precompile(Tuple{typeof(Base.getproperty), Base.PkgId, Symbol})
precompile(Tuple{typeof(Base.:(==)), Base.UUID, Base.UUID})
precompile(Tuple{typeof(Base.setproperty!), CondaPkg.State, Symbol, String})
precompile(Tuple{typeof(Base.Filesystem.isdir), String})
precompile(Tuple{typeof(CondaPkg._resolve_can_skip_1), Any, Any})
precompile(Tuple{typeof(Base.open), Function, String})
precompile(Tuple{Base.var"##open#355", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), typeof(CondaPkg.read_meta), String})
precompile(Tuple{typeof(CondaPkg.read_meta), IO})
precompile(Tuple{typeof(CondaPkg.read_meta), IO, Type{Float64}})
precompile(Tuple{typeof(Base.read), Base.IOStream, Type{Float64}})
precompile(Tuple{typeof(CondaPkg.read_meta), IO, Type{Array{String, 1}}})
precompile(Tuple{Type{Array{String, 1}}})
precompile(Tuple{typeof(CondaPkg.read_meta), IO, Type{String}})
precompile(Tuple{typeof(Base.read), Base.IOStream, Int64})
precompile(Tuple{typeof(Base.length), Array{UInt8, 1}})
precompile(Tuple{typeof(CondaPkg.read_meta), IO, Type{Base.VersionNumber}})
precompile(Tuple{typeof(CondaPkg.read_meta), IO, Type{Array{CondaPkg.PkgSpec, 1}}})
precompile(Tuple{Type{Array{CondaPkg.PkgSpec, 1}}})
precompile(Tuple{typeof(CondaPkg.read_meta), IO, Type{CondaPkg.PkgSpec}})
precompile(Tuple{Type{NamedTuple{(:version,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Core.var"#Type##kw", Any, Type{CondaPkg.PkgSpec}, Any})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:version,), Tuple{String}}, Symbol})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:version,), Tuple{String}}, Symbol})
precompile(Tuple{CondaPkg.var"#PkgSpec#3#4", Any, Type{CondaPkg.PkgSpec}, Any})
precompile(Tuple{typeof(CondaPkg.validate_pkg), Any})
precompile(Tuple{typeof(CondaPkg.is_valid_pkg), Any})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(CondaPkg.normalise_pkg), Any})
precompile(Tuple{typeof(Base.strip), String})
precompile(Tuple{typeof(Base.Unicode.lowercase), Base.SubString{String}})
precompile(Tuple{typeof(CondaPkg.validate_version), Any})
precompile(Tuple{typeof(CondaPkg.is_valid_version), Any})
precompile(Tuple{typeof(CondaPkg.normalise_version), Any})
precompile(Tuple{typeof(Base.convert), Type{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.push!), Array{CondaPkg.PkgSpec, 1}, CondaPkg.PkgSpec})
precompile(Tuple{typeof(CondaPkg.read_meta), IO, Type{Array{CondaPkg.ChannelSpec, 1}}})
precompile(Tuple{Type{Array{CondaPkg.ChannelSpec, 1}}})
precompile(Tuple{typeof(CondaPkg.read_meta), IO, Type{CondaPkg.ChannelSpec}})
precompile(Tuple{Type{CondaPkg.ChannelSpec}, Any})
precompile(Tuple{typeof(CondaPkg.validate_channel), Any})
precompile(Tuple{typeof(CondaPkg.is_valid_channel), Any})
precompile(Tuple{typeof(Base.:(!=)), Base.SubString{String}, String})
precompile(Tuple{typeof(CondaPkg.normalise_channel), Any})
precompile(Tuple{typeof(Base.push!), Array{CondaPkg.ChannelSpec, 1}, CondaPkg.ChannelSpec})
precompile(Tuple{typeof(CondaPkg.read_meta), IO, Type{Array{CondaPkg.PipPkgSpec, 1}}})
precompile(Tuple{Type{Array{CondaPkg.PipPkgSpec, 1}}})
precompile(Tuple{Type{NamedTuple{(:timestamp, :load_path, :extra_path, :version, :packages, :channels, :pip_packages), T} where T<:Tuple}, Tuple{Float64, Array{String, 1}, Array{String, 1}, Base.VersionNumber, Array{CondaPkg.PkgSpec, 1}, Array{CondaPkg.ChannelSpec, 1}, Array{CondaPkg.PipPkgSpec, 1}}})
precompile(Tuple{Core.var"#Type##kw", Any, Type{CondaPkg.Meta}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:timestamp, :load_path, :extra_path, :version, :packages, :channels, :pip_packages), Tuple{Float64, Array{String, 1}, Array{String, 1}, Base.VersionNumber, Array{CondaPkg.PkgSpec, 1}, Array{CondaPkg.ChannelSpec, 1}, Array{CondaPkg.PipPkgSpec, 1}}}, Symbol})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:timestamp, :load_path, :extra_path, :version, :packages, :channels, :pip_packages), Tuple{Float64, Array{String, 1}, Array{String, 1}, Base.VersionNumber, Array{CondaPkg.PkgSpec, 1}, Array{CondaPkg.ChannelSpec, 1}, Array{CondaPkg.PipPkgSpec, 1}}}, Symbol})
precompile(Tuple{CondaPkg.var"##Meta#7", Any, Any, Any, Any, Any, Any, Any, Type{CondaPkg.Meta}})
precompile(Tuple{Type{CondaPkg.Meta}, Float64, Array{String, 1}, Array{String, 1}, Base.VersionNumber, Array{CondaPkg.PkgSpec, 1}, Array{CondaPkg.ChannelSpec, 1}, Array{CondaPkg.PipPkgSpec, 1}})
precompile(Tuple{typeof(Base.getproperty), CondaPkg.Meta, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Filesystem.StatStruct, Symbol})
precompile(Tuple{typeof(Base.max), Float64, Float64})
precompile(Tuple{typeof(CondaPkg._resolve_find_dependencies), Any, Any})
precompile(Tuple{Type{Base.Dict{String, Base.Dict{String, CondaPkg.PkgSpec}}}})
precompile(Tuple{typeof(Base.getindex), Type{CondaPkg.ChannelSpec}})
precompile(Tuple{Type{Base.Dict{String, Base.Dict{String, CondaPkg.PipPkgSpec}}}})
precompile(Tuple{typeof(Pkg.API.dependencies)})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Base.Dict{String, Any}, Nothing}, Any, Any})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{UInt64}, Base.IdDict{Any, Any}})
precompile(Tuple{Type{NamedTuple{(:name, :version, :tree_hash, :is_direct_dep, :is_pinned, :is_tracking_path, :is_tracking_repo, :is_tracking_registry, :git_revision, :git_source, :source, :dependencies), T} where T<:Tuple}, Tuple{String, Base.VersionNumber, String, Bool, Bool, Bool, Bool, Bool, Nothing, Nothing, String, Base.Dict{String, Base.UUID}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:name, :version, :tree_hash, :is_direct_dep, :is_pinned, :is_tracking_path, :is_tracking_repo, :is_tracking_registry, :git_revision, :git_source, :source, :dependencies), Tuple{String, Base.VersionNumber, String, Bool, Bool, Bool, Bool, Bool, Nothing, Nothing, String, Base.Dict{String, Base.UUID}}}, Type{Pkg.API.PackageInfo}})
precompile(Tuple{Type{NamedTuple{(:name, :version, :tree_hash, :is_direct_dep, :is_pinned, :is_tracking_path, :is_tracking_repo, :is_tracking_registry, :git_revision, :git_source, :source, :dependencies), T} where T<:Tuple}, Tuple{String, Nothing, Nothing, Bool, Bool, Bool, Bool, Bool, Nothing, Nothing, String, Base.Dict{String, Base.UUID}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:name, :version, :tree_hash, :is_direct_dep, :is_pinned, :is_tracking_path, :is_tracking_repo, :is_tracking_registry, :git_revision, :git_source, :source, :dependencies), Tuple{String, Nothing, Nothing, Bool, Bool, Bool, Bool, Bool, Nothing, Nothing, String, Base.Dict{String, Base.UUID}}}, Type{Pkg.API.PackageInfo}})
precompile(Tuple{typeof(Base.values), Base.Dict{Base.UUID, Pkg.API.PackageInfo}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CondaPkg.var"#8#9", Base.ValueIterator{Base.Dict{Base.UUID, Pkg.API.PackageInfo}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.ValueIterator{Base.Dict{Base.UUID, Pkg.API.PackageInfo}}, CondaPkg.var"#8#9"}})
precompile(Tuple{CondaPkg.var"#8#9", Any})
precompile(Tuple{typeof(Base.getproperty), Pkg.API.PackageInfo, Symbol})
precompile(Tuple{typeof(Base._array_for), Type{String}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Base.ValueIterator{Base.Dict{Base.UUID, Pkg.API.PackageInfo}}, CondaPkg.var"#8#9"}, Int64})
precompile(Tuple{typeof(CondaPkg._log), IO, Any})
precompile(Tuple{typeof(TOML.parsefile), String})
precompile(Tuple{typeof(CondaPkg.parse_deps), Any})
precompile(Tuple{typeof(Base.getindex), Type{CondaPkg.PkgSpec}})
precompile(Tuple{typeof(CondaPkg._convert), Type{Base.Dict{String, String}}, Any})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, String}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, String}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, String}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, String}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{CondaPkg.PipPkgSpec}})
precompile(Tuple{Type{NamedTuple{(:packages, :channels, :pip_packages), T} where T<:Tuple}, Tuple{Array{CondaPkg.PkgSpec, 1}, Array{CondaPkg.ChannelSpec, 1}, Array{CondaPkg.PipPkgSpec, 1}}})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:packages, :channels, :pip_packages), Tuple{Array{CondaPkg.PkgSpec, 1}, Array{CondaPkg.ChannelSpec, 1}, Array{CondaPkg.PipPkgSpec, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:packages, :channels, :pip_packages), Tuple{Array{CondaPkg.PkgSpec, 1}, Array{CondaPkg.ChannelSpec, 1}, Array{CondaPkg.PipPkgSpec, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{CondaPkg.PkgSpec, 1}})
precompile(Tuple{typeof(Base.getproperty), CondaPkg.PkgSpec, Symbol})
precompile(Tuple{typeof(Base.get!), Type{Base.Dict{String, CondaPkg.PkgSpec}}, Base.Dict{String, Base.Dict{String, CondaPkg.PkgSpec}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, CondaPkg.PkgSpec}, CondaPkg.PkgSpec, String})
precompile(Tuple{typeof(Base.iterate), Array{CondaPkg.PkgSpec, 1}, Int64})
precompile(Tuple{typeof(Base.isempty), Array{CondaPkg.ChannelSpec, 1}})
precompile(Tuple{typeof(Base.iterate), Array{CondaPkg.PipPkgSpec, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Dict{String, Base.Dict{String, CondaPkg.PkgSpec}}, Array{CondaPkg.ChannelSpec, 1}, Base.Dict{String, Base.Dict{String, CondaPkg.PipPkgSpec}}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Dict{String, Base.Dict{String, CondaPkg.PkgSpec}}, Array{CondaPkg.ChannelSpec, 1}, Base.Dict{String, Base.Dict{String, CondaPkg.PipPkgSpec}}, Array{String, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.isempty), Base.Dict{String, Base.Dict{String, CondaPkg.PipPkgSpec}}})
precompile(Tuple{typeof(Base.unique!), Array{CondaPkg.ChannelSpec, 1}})
precompile(Tuple{Base.var"#sort!##kw", NamedTuple{(:by,), Tuple{CondaPkg.var"#19#22"}}, typeof(Base.sort!), Array{CondaPkg.ChannelSpec, 1}})
precompile(Tuple{typeof(CondaPkg._resolve_merge_packages), Any})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, Base.Dict{String, CondaPkg.PkgSpec}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, Base.Dict{String, CondaPkg.PkgSpec}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, Base.Dict{String, CondaPkg.PkgSpec}}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Base.Dict{String, CondaPkg.PkgSpec}})
precompile(Tuple{typeof(Base.values), Base.Dict{String, CondaPkg.PkgSpec}})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.Dict{String, CondaPkg.PkgSpec}}})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.Dict{String, CondaPkg.PkgSpec}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, Base.Dict{String, CondaPkg.PkgSpec}}, Int64})
precompile(Tuple{typeof(Base.unique!), Array{CondaPkg.PkgSpec, 1}})
precompile(Tuple{Base.var"#sort!##kw", NamedTuple{(:by,), Tuple{CondaPkg.var"#10#11"}}, typeof(Base.sort!), Array{CondaPkg.PkgSpec, 1}})
precompile(Tuple{typeof(CondaPkg._resolve_merge_pip_packages), Any})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, Base.Dict{String, CondaPkg.PipPkgSpec}}})
precompile(Tuple{Base.var"#sort!##kw", NamedTuple{(:by,), Tuple{CondaPkg.var"#12#13"}}, typeof(Base.sort!), Array{CondaPkg.PipPkgSpec, 1}})
precompile(Tuple{typeof(CondaPkg._resolve_can_skip_2), Any, Any, Any, Any})
precompile(Tuple{typeof(Base.:(==)), Array{CondaPkg.PkgSpec, 1}, Array{CondaPkg.PkgSpec, 1}})
precompile(Tuple{typeof(Base.:(==)), CondaPkg.PkgSpec, CondaPkg.PkgSpec})
precompile(Tuple{typeof(Base.:(==)), Array{CondaPkg.PipPkgSpec, 1}, Array{CondaPkg.PipPkgSpec, 1}})
precompile(Tuple{typeof(Base.Libc.time)})
precompile(Tuple{Base.var"##open#355", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CondaPkg.var"#20#23"{CondaPkg.Meta}, String, Vararg{String}})
precompile(Tuple{CondaPkg.var"#20#23"{CondaPkg.Meta}, Any})
precompile(Tuple{typeof(CondaPkg.write_meta), IO, CondaPkg.Meta})
precompile(Tuple{typeof(Base.write), Base.IOStream, Int64})
precompile(Tuple{typeof(CondaPkg.write_meta), IO, Float64})
precompile(Tuple{typeof(Base.write), Base.IOStream, Float64})
precompile(Tuple{typeof(CondaPkg.write_meta), IO, Array{T, 1} where T})
precompile(Tuple{typeof(CondaPkg.write_meta), IO, String})
precompile(Tuple{typeof(Base.write), Base.IOStream, String})
precompile(Tuple{typeof(CondaPkg.write_meta), IO, Base.VersionNumber})
precompile(Tuple{typeof(Base.length), Array{CondaPkg.PkgSpec, 1}})
precompile(Tuple{typeof(CondaPkg.write_meta), IO, CondaPkg.PkgSpec})
precompile(Tuple{typeof(Base.length), Array{CondaPkg.ChannelSpec, 1}})
precompile(Tuple{typeof(Base.iterate), Array{CondaPkg.ChannelSpec, 1}})
precompile(Tuple{typeof(CondaPkg.write_meta), IO, CondaPkg.ChannelSpec})
precompile(Tuple{typeof(Base.getproperty), CondaPkg.ChannelSpec, Symbol})
precompile(Tuple{typeof(Base.iterate), Array{CondaPkg.ChannelSpec, 1}, Int64})
precompile(Tuple{typeof(Base.length), Array{CondaPkg.PipPkgSpec, 1}})
precompile(Tuple{typeof(CondaPkg.activate!), Any})
precompile(Tuple{typeof(CondaPkg.bindirs)})
precompile(Tuple{typeof(Base.join), Tuple{String, String}, Char})
precompile(Tuple{typeof(CondaPkg.backend)})
precompile(Tuple{typeof(Base.setproperty!), CondaPkg.State, Symbol, Symbol})
precompile(Tuple{typeof(MicroMamba.root_dir)})
precompile(Tuple{typeof(Base.getproperty), MicroMamba.State, Symbol})
precompile(Tuple{typeof(Base.setproperty!), MicroMamba.State, Symbol, String})
precompile(Tuple{typeof(Scratch.get_scratch!), Base.UUID, String, Base.UUID})
precompile(Tuple{typeof(Scratch.scratch_dir), String, Vararg{String}})
precompile(Tuple{typeof(Base.Filesystem.abspath), String, String, Vararg{String}})
precompile(Tuple{typeof(MicroMamba.executable)})
precompile(Tuple{MicroMamba.var"##executable#1", IO, typeof(MicroMamba.executable)})
precompile(Tuple{typeof(Base.setproperty!), MicroMamba.State, Symbol, Bool})
precompile(Tuple{Pkg.Artifacts.var"#ensure_artifact_installed##kw", NamedTuple{(:io,), Tuple{Base.TTY}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, String})
precompile(Tuple{typeof(Base.string), String, String, String, String, Vararg{String}})
precompile(Tuple{Type{NamedTuple{(:validate_strict, :libc, :call_abi, :libgfortran_version, :cxxstring_abi, :libstdcxx_version, :os_version), T} where T<:Tuple}, Tuple{Bool, String, Nothing, Base.VersionNumber, String, Base.VersionNumber, Nothing}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:validate_strict, :libc, :call_abi, :libgfortran_version, :cxxstring_abi, :libstdcxx_version, :os_version), Tuple{Bool, String, Nothing, Base.VersionNumber, String, Base.VersionNumber, Nothing}}, Array{Pair{Symbol, Base.SubString{String}}, 1}})
precompile(Tuple{Base.var"##s78#203", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Vararg{Symbol}}, Type{var"#s78"} where var"#s78"<:(NamedTuple{names, T} where T<:Tuple where names), Type{var"#s77"} where var"#s77"<:(NamedTuple{names, T} where T<:Tuple where names)})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:validate_strict, :libc, :call_abi, :libgfortran_version, :cxxstring_abi, :libstdcxx_version, :os_version), Tuple{Bool, String, Nothing, Base.VersionNumber, String, Base.VersionNumber, Nothing}}, NamedTuple{(:julia_version,), Tuple{Base.SubString{String}}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:validate_strict, :libc, :call_abi, :libgfortran_version, :cxxstring_abi, :libstdcxx_version, :os_version, :julia_version), Tuple{Bool, String, Nothing, Base.VersionNumber, String, Base.VersionNumber, Nothing, Base.SubString{String}}}, Type{Base.BinaryPlatforms.Platform}, String, String})
precompile(Tuple{Pkg.Artifacts.var"#ensure_artifact_installed##kw", NamedTuple{(:platform, :verbose, :quiet_download, :io), Tuple{Base.BinaryPlatforms.Platform, Bool, Bool, Base.TTY}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Base.read), Base.Cmd, Type{String}})
precompile(Tuple{typeof(Base.read), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.:(==)), Base.SubString{String}, String})
precompile(Tuple{typeof(Base.setproperty!), MicroMamba.State, Symbol, Base.VersionNumber})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Array{String, 1}}}})
precompile(Tuple{Base.var"#697#698"{Base.Process}})
precompile(Tuple{typeof(Base.pointer), Array{Int32, 1}})
precompile(Tuple{typeof(PythonCall.C.Py_SetPythonHome), Ptr{Int32}})
precompile(Tuple{typeof(PythonCall.C.Py_SetProgramName), Ptr{Int32}})
precompile(Tuple{typeof(Base._append!), Array{PythonCall.C.PyMethodDef, 1}, Base.HasLength, Tuple{PythonCall.C.PyMethodDef, PythonCall.C.PyMethodDef, PythonCall.C.PyMethodDef, PythonCall.C.PyMethodDef, PythonCall.C.PyMethodDef, PythonCall.C.PyMethodDef}})
precompile(Tuple{typeof(PythonCall.__init__)})
precompile(Tuple{PythonCall.var"##s264#69", Any, Any})
precompile(Tuple{PythonCall.var"#176#180"})
precompile(Tuple{typeof(Libsharp.destroy_alm_info), Libsharp.AlmInfo})
precompile(Tuple{typeof(Libsharp.destroy_geom_info), Libsharp.GeomInfo})
precompile(Tuple{typeof(FFTW.maybe_destroy_plan), FFTW.r2rFFTWPlan{Float64, (3,), true, 1, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(WCS.free!), WCS.WCSTransform})
precompile(Tuple{typeof(PythonCall.pynew)})
precompile(Tuple{typeof(Base._append!), Array{PythonCall.Py, 1}, Base.HasLength, Tuple{PythonCall.Py, PythonCall.Py, PythonCall.Py, PythonCall.Py, PythonCall.Py}})
precompile(Tuple{typeof(Base._append!), Array{PythonCall.Py, 1}, Base.HasLength, Tuple{PythonCall.Py, PythonCall.Py, PythonCall.Py, PythonCall.Py}})
precompile(Tuple{typeof(Base.get!), Type{Array{PythonCall.PyConvertRule, 1}}, Base.Dict{String, Array{PythonCall.PyConvertRule, 1}}, String})
precompile(Tuple{PythonCall.var"##pycall#54", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PythonCall.pycall), PythonCall.Py, Int64, Vararg{Int64}})
precompile(Tuple{typeof(PythonCall.pytuple_fromiter), Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(PythonCall.pycallargs), PythonCall.Py, PythonCall.Py})
precompile(Tuple{typeof(PythonCall.pydel!), PythonCall.Py})
precompile(Tuple{PythonCall.var"##pycall#54", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PythonCall.pycall), PythonCall.Py, Int64, Vararg{Any}})
precompile(Tuple{typeof(PythonCall.pytuple_fromiter), Tuple{Int64, String}})
precompile(Tuple{typeof(PythonCall.pytuple_setitem), PythonCall.Py, Int64, String})
precompile(Tuple{typeof(PythonCall.pysetitem), PythonCall.Py, String, String})
precompile(Tuple{typeof(PythonCall.pystr_asstring), PythonCall.Py})
precompile(Tuple{typeof(PythonCall.pygetitem), PythonCall.Py, String})
precompile(Tuple{typeof(PythonCall.pysetattr), PythonCall.Py, String, PythonCall.Py})
precompile(Tuple{PythonCall.var"##pycall#54", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PythonCall.pycall), PythonCall.Py, String, Vararg{String}})
precompile(Tuple{typeof(PythonCall.pytuple_fromiter), Tuple{String, String, String}})
precompile(Tuple{PythonCall.var"##pycall#54", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PythonCall.pycall), PythonCall.Py, PythonCall.Py, Vararg{PythonCall.Py}})
precompile(Tuple{typeof(PythonCall.pytuple_fromiter), Tuple{PythonCall.Py, PythonCall.Py}})
precompile(Tuple{typeof(PythonCall.pytuple_setitem), PythonCall.Py, Int64, PythonCall.Py})
precompile(Tuple{PythonCall.var"##pycall#54", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PythonCall.pycall), PythonCall.Py, String, Vararg{Any}})
precompile(Tuple{typeof(PythonCall.pytuple_fromiter), Tuple{String, PythonCall.Py}})
precompile(Tuple{typeof(PythonCall.pysetattr), PythonCall.Py, String, Module})
precompile(Tuple{typeof(Base.__cat_offset!), Array{String, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, String, Array{String, 1}})
precompile(Tuple{typeof(PythonCall.pylist_setitem), PythonCall.Py, Int64, String})
precompile(Tuple{typeof(PythonCall.pysetattr), PythonCall.Py, String, String})
precompile(Tuple{typeof(PythonCall.pydict_setitem), PythonCall.Py, String, String})
precompile(Tuple{typeof(Base.getproperty), PythonCall.Py, Symbol})
precompile(Tuple{PythonCall.Py, String})
precompile(Tuple{Type{NamedTuple{(:wcs,), T} where T<:Tuple}, Tuple{PythonCall.Py}})
precompile(Tuple{typeof(Base.iterate), PythonCall.Py})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:wcs,), Tuple{PythonCall.Py}}, PythonCall.Py, Tuple{Int64, PythonCall.Py, PythonCall.Py}})
precompile(Tuple{typeof(Base.indexed_iterate), PythonCall.Py, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), PythonCall.Py, Int64, PythonCall.Py})
precompile(Tuple{PythonCall.Py, PythonCall.Py, Vararg{PythonCall.Py}})
precompile(Tuple{PythonCall.var"##_#11", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, PythonCall.Py, PythonCall.Py, Vararg{PythonCall.Py}})
precompile(Tuple{typeof(PythonCall.pycall), PythonCall.Py, PythonCall.Py, Vararg{PythonCall.Py}})
precompile(Tuple{typeof(Base.Multimedia.display), VSCodeServer.InlineDisplay, PythonCall.Py})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.julia-vscode.diagnostics")}, PythonCall.Py})
precompile(Tuple{typeof(Base.findfirst), Base.Fix2{typeof(Base.:(==)), Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(PythonCall.pyshow_rule_mimebundle), Base.DevNull, String, PythonCall.Py})
precompile(Tuple{typeof(PythonCall.pyshow_rule_repr), Base.DevNull, String, PythonCall.Py})
precompile(Tuple{typeof(PythonCall.pyshow_rule_savefig), Base.DevNull, String, PythonCall.Py})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}, PythonCall.Py})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}, PythonCall.Py})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}, PythonCall.Py})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}, PythonCall.Py})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}, PythonCall.Py})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}, PythonCall.Py})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, PythonCall.Py})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("juliavscode/html")}, PythonCall.Py})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/png")}, PythonCall.Py})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, PythonCall.Py})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/gif")}, PythonCall.Py})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, PythonCall.Py})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, PythonCall.Py})
precompile(Tuple{typeof(VSCodeServer.safe_render), PythonCall.Py})
precompile(Tuple{typeof(Base.show), Base.IOContext{VSCodeServer.LimitIO{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Base.Multimedia.MIME{Symbol("text/plain")}, PythonCall.Py})
precompile(Tuple{Base.var"##with_output_color#867", Bool, Bool, Bool, Bool, Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{VSCodeServer.LimitIO{Base.GenericIOBuffer{Array{UInt8, 1}}}}, String})
precompile(Tuple{typeof(VSCodeServer.wsicon), PythonCall.Py})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, PythonCall.Py})
precompile(Tuple{typeof(VSCodeServer.treerender), PythonCall.Py})
precompile(Tuple{typeof(VSCodeServer.can_display), PythonCall.Py})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, PythonCall.Py})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:lmax, :spin), Tuple{Int64, Int64}}, PythonCall.Py, PythonCall.Py})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, PythonCall.Py})
precompile(Tuple{typeof(PythonCall.pystr), Type{String}, PythonCall.Py})
precompile(Tuple{PythonCall.Utils.var"##s4#5", Any, Any, Any})
precompile(Tuple{typeof(Base.:(==)), TypeVar, TypeVar})
precompile(Tuple{PythonCall.Utils.var"##s4#4", Any, Any, Any})
precompile(Tuple{typeof(Base.findfirst), Base.Fix2{typeof(Base.:(==)), Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{PythonCall.PyArray{T, N, M, L, R} where R where L where M where N where T}, PythonCall.Py})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Type, Array{Function, 1}}, Type})
precompile(Tuple{typeof(PythonCall.pyconvert_get_rules), Type, PythonCall.Py})
precompile(Tuple{PythonCall.var"#pyisin#35", PythonCall.Py, Array{PythonCall.Py, 1}})
precompile(Tuple{typeof(Base.push!), Array{PythonCall.Py, 1}, PythonCall.Py})
precompile(Tuple{typeof(PythonCall.pyis), PythonCall.Py, PythonCall.Py})
precompile(Tuple{typeof(Base.print_to_string), PythonCall.Py, Vararg{Any}})
precompile(Tuple{typeof(Base.axes), Array{PythonCall.PyConvertRule, 1}, Int64})
precompile(Tuple{Base.var"#sort##kw", NamedTuple{(:by,), Tuple{PythonCall.var"#28#45"}}, typeof(Base.sort), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{PythonCall.PyConvertRule, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), PythonCall.PyConvertRule, Symbol})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), Array{PythonCall.PyConvertRule, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._array_for), Type{PythonCall.PyConvertRule}, Array{PythonCall.PyConvertRule, 1}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{PythonCall.PyConvertRule, 1}})
precompile(Tuple{typeof(Base.iterate), Array{PythonCall.PyConvertRule, 1}})
precompile(Tuple{Type{PythonCall.PyConvertRule}, Type, Function, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{PythonCall.PyConvertRule, 1}, PythonCall.PyConvertRule, Int64})
precompile(Tuple{typeof(Base.iterate), Array{PythonCall.PyConvertRule, 1}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, PythonCall.var"#30#46", Array{PythonCall.PyConvertRule, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{PythonCall.PyConvertRule, 1}, PythonCall.var"#30#46"}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Array{PythonCall.PyConvertRule, 1}, PythonCall.var"#30#46"}}})
precompile(Tuple{PythonCall.var"#29#47"{PythonCall.PyConvertRule}, Type})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, PythonCall.var"#31#48", Array{PythonCall.PyConvertRule, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.Iterators.Filter{PythonCall.var"#31#48", Array{PythonCall.PyConvertRule, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{PythonCall.var"#31#48", Array{PythonCall.PyConvertRule, 1}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{PythonCall.PyConvertRule, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, PythonCall.var"#33#50", Base.Iterators.Enumerate{Array{PythonCall.PyConvertRule, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, PythonCall.var"#32#49", Base.Iterators.Filter{PythonCall.var"#33#50", Base.Iterators.Enumerate{Array{PythonCall.PyConvertRule, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{PythonCall.var"#33#50", Base.Iterators.Enumerate{Array{PythonCall.PyConvertRule, 1}}}, PythonCall.var"#32#49"}})
precompile(Tuple{typeof(Base._array_for), Type{Function}, Array{PythonCall.PyConvertRule, 1}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Function, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Array{Function, 1}}, Array{Function, 1}, Type{Int64}})
precompile(Tuple{PythonCall.var"#52#53"{Int64, typeof(PythonCall.pyconvert_rule_int)}, PythonCall.Py})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Array{Function, 1}}, Array{Function, 1}, Type{UInt64}})
precompile(Tuple{PythonCall.var"#52#53"{UInt64, typeof(PythonCall.pyconvert_rule_int)}, PythonCall.Py})
precompile(Tuple{typeof(PythonCall.pyarray_get_ptr), PythonCall.PyArraySource_ArrayInterface, Type{Base.Complex{Float64}}})
precompile(Tuple{typeof(PythonCall.pyarray_get_size), PythonCall.PyArraySource_ArrayInterface, Base.Val{1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Array{Function, 1}}, Array{Function, 1}, Type{Tuple{Int64}}})
precompile(Tuple{PythonCall.var"#52#53"{Tuple{Int64}, typeof(PythonCall.pyconvert_rule_iterable)}, PythonCall.Py})
precompile(Tuple{typeof(PythonCall.pyarray_get_strides), PythonCall.PyArraySource_ArrayInterface, Base.Val{1}, Type{Base.Complex{Float64}}, Tuple{Int64}})
precompile(Tuple{Type{PythonCall.PyArray{Base.Complex{Float64}, 1, true, true, Base.Complex{Float64}}}, Base.Val{:new}, Ptr{Base.Complex{Float64}}, Tuple{Int64}, Tuple{Int64}, PythonCall.Py, PythonCall.Py})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, PythonCall.PyArray{Base.Complex{Float64}, 1, true, true, Base.Complex{Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.imag), Tuple{PythonCall.PyArray{Base.Complex{Float64}, 1, true, true, Base.Complex{Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.imag), Tuple{PythonCall.PyArray{Base.Complex{Float64}, 1, true, true, Base.Complex{Float64}}}}})
precompile(Tuple{typeof(RecipesBase.plot), Any})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{Type{RecipesBase.RecipeData}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Any})
precompile(Tuple{typeof(RecipesBase.wrap_tuple), Tuple{DataType, Nothing, Array{Float64, 1}, Nothing}})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Array{Float64, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, typeof(Base.float)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base._replace!), RecipesPipeline.var"#21#22", Array{Float64, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.length), Array{Nothing, 1}})
precompile(Tuple{typeof(Base.length), Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Nothing, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Array{Float64, 1}, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Nothing, Array{Float64, 1}, Nothing, Bool})
precompile(Tuple{typeof(RecipesPipeline.is_surface), Symbol})
precompile(Tuple{typeof(Base.:(==)), PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(Plots._cycle), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.RGB{Float64}, 1}, Int64})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{Float64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(Base.getproperty), Healpix.Alm{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Base.Complex{Float64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.imag), Tuple{Array{Base.Complex{Float64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.imag), Tuple{Array{Base.Complex{Float64}, 1}}}})
precompile(Tuple{typeof(RecipesBase.plot!), Any})
precompile(Tuple{Base64.var"#3#4"{Base64.Base64EncodePipe}, Base64.Buffer})
precompile(Tuple{typeof(PythonCall.py_finalizer), PythonCall.Py})
precompile(Tuple{Plots.var"##plot!#148", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(RecipesBase.plot!), Any})
precompile(Tuple{typeof(RecipesBase.plot!), Plots.Plot{T} where T<:RecipesBase.AbstractBackend, Any})
precompile(Tuple{Type{NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), T} where T<:Tuple}, Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGBA{Float64}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGBA{Float64}}}, NamedTuple{(), Tuple{}}})
precompile(Tuple{Plots.var"#font##kw", NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGBA{Float64}}}, typeof(Plots.font)})
precompile(Tuple{typeof(Base.parse), Type{ColorTypes.Colorant{T, N} where N where T}, ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{Plots.Font}, String, Int64, Symbol, Symbol, Float64, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.Multimedia.display), VSCodeServer.InlineDisplay, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.hasfield), Type, Symbol})
precompile(Tuple{typeof(Base.fieldindex), DataType, Symbol, Bool})
precompile(Tuple{typeof(Base.Multimedia.display), VSCodeServer.InlineDisplay, String, Any})
precompile(Tuple{typeof(Base.Multimedia.display), VSCodeServer.InlineDisplay, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.widen), Float64, Float64, Symbol})
precompile(Tuple{typeof(Plots.get_ticks), Symbol, Array{Float64, 1}, Array{Any, 1}, Tuple{Float64, Float64}, Vararg{Any}})
precompile(Tuple{typeof(Plots.optimal_ticks_and_labels), Nothing, Tuple{Float64, Float64}, Symbol, Symbol})
precompile(Tuple{typeof(Showoff.showoff), Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.map), Function, Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Plots.var"#400#401"{typeof(Plots.convert_sci_unicode)}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, Plots.var"#400#401"{typeof(Plots.convert_sci_unicode)}}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, Char})
precompile(Tuple{typeof(Base.replace), String, Pair{Char, String}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, String})
precompile(Tuple{typeof(Base.replace), String, Pair{String, String}})
precompile(Tuple{Type{NamedTuple{(:rotation, :color), T} where T<:Tuple}, Tuple{Int64, ColorTypes.RGBA{Float64}}})
precompile(Tuple{Plots.var"#gr_set_font##kw", NamedTuple{(:rotation, :color), Tuple{Int64, ColorTypes.RGBA{Float64}}}, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.maximum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.float), Int64})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Symbol, 1}, Plots.var"#72#73"{Plots.Series}}, Base.Colon})
precompile(Tuple{Plots.var"##gr_set_font#395", Symbol, Symbol, ColorTypes.RGBA{Float64}, Float64, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(GR.setwindow), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Float64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{Plots.var"#add_major_or_minor_segments#104"{Plots.Subplot{Plots.GRBackend}, RecipesPipeline.var"#9#10"{Symbol}, RecipesPipeline.var"#7#8"{Symbol}, Float64, Float64, Plots.Segments{Tuple{Float64, Float64}}, Float64, Float64, Plots.Axis, Bool}, Array{Float64, 1}, Bool, Plots.Segments{Tuple{Float64, Float64}}, Float64, Bool})
precompile(Tuple{typeof(Plots.gr_set_line), Float64, Symbol, ColorTypes.RGBA{Float64}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGBA{Float64}, Float64})
precompile(Tuple{typeof(GR.wctondc), Float64, Float64})
precompile(Tuple{typeof(Plots.handle_surface), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.GRBackend}, Plots.Series})
precompile(Tuple{typeof(Plots.gr_draw_segments), Plots.Series, Base.OneTo{Int64}, Array{Float64, 1}, Nothing, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.isempty), Base.OneTo{Int64}})
precompile(Tuple{typeof(RecipesPipeline.is3d), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.iter_segments), Base.OneTo{Int64}, Vararg{Any}})
precompile(Tuple{typeof(Base.map), typeof(Base.firstindex), Tuple{Base.OneTo{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.map), typeof(Base.lastindex), Tuple{Base.OneTo{Int64}, Array{Float64, 1}}})
precompile(Tuple{Type{Plots.NaNSegmentsIterator}, Tuple{Base.OneTo{Int64}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.findfirst), Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.findnext), Base.var"#84#85"{Plots.var"#20#21"{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), Plots.var"#20#21"{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{Base.OneTo{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{Plots.var"#36#38"{Plots.Series}, Symbol})
precompile(Tuple{typeof(Plots.warn_on_attr_dim_mismatch), Plots.Series, Base.OneTo{Int64}, Array{Float64, 1}, Nothing, Base.Generator{Array{Any, 1}, Plots.var"#7#11"}})
precompile(Tuple{Plots.var"#7#11", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{typeof(Base.min)}, Base.Generator{Base.Generator{Array{Any, 1}, Plots.var"#7#11"}, Plots.var"#12#15"}})
precompile(Tuple{typeof(Base.foldl_impl), Base.MappingRF{Plots.var"#7#11", Base.MappingRF{Plots.var"#12#15", Base.BottomRF{typeof(Base.min)}}}, Base._InitialValue, Array{Any, 1}})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{typeof(Base.max)}, Base.Generator{Base.Generator{Array{Any, 1}, Plots.var"#7#11"}, Plots.var"#13#16"}})
precompile(Tuple{typeof(Base.foldl_impl), Base.MappingRF{Plots.var"#7#11", Base.MappingRF{Plots.var"#13#16", Base.BottomRF{typeof(Base.max)}}}, Base._InitialValue, Array{Any, 1}})
precompile(Tuple{Type{Base.UnitRange{T} where T<:Real}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, Plots.var"#7#11"}})
precompile(Tuple{typeof(Base.getproperty), Plots.SeriesSegment, Symbol})
precompile(Tuple{typeof(Plots._cycle), ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Plots._cycle), Float64, Int64})
precompile(Tuple{typeof(Plots._cycle), Symbol, Int64})
precompile(Tuple{typeof(Plots.gr_set_line), Float64, Symbol, ColorTypes.RGBA{Float64}, Plots.Series})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGBA{Float64}, Nothing})
precompile(Tuple{typeof(Base.getindex), Base.OneTo{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:arrowside, :arrowstyle), T} where T<:Tuple}, Tuple{Symbol, Symbol}})
precompile(Tuple{Plots.var"#gr_polyline##kw", NamedTuple{(:arrowside, :arrowstyle), Tuple{Symbol, Symbol}}, typeof(Plots.gr_polyline), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(GR.polyline), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, Plots.var"#7#11"}, Int64})
precompile(Tuple{typeof(VSCodeServer.safe_render), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.depwarn), String, Symbol})
precompile(Tuple{Type{NamedTuple{(:exception, :backtrace), T} where T<:Tuple}, Tuple{LoadError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}})
precompile(Tuple{typeof(Base.display_error), Base.TTY, VSCodeServer.EvalErrorStack})
precompile(Tuple{typeof(VSCodeServer.display_repl_error), Base.TTY, VSCodeServer.EvalErrorStack})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, String})
precompile(Tuple{typeof(Base.reverse), Base.ExceptionStack})
precompile(Tuple{typeof(Base.reverse), Base.ExceptionStack, Int64, Int64})
precompile(Tuple{typeof(Base.to_shape), Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.similar), Base.ExceptionStack, Type{Any}, Tuple{Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{LoadError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{LoadError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(VSCodeServer.crop_backtrace), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(Base.StackTraces.stacktrace), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.showerror), Base.IOContext{Base.TTY}, LoadError, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{Base.var"#showerror##kw", NamedTuple{(:backtrace,), Tuple{Bool}}, typeof(Base.showerror), Base.IOContext{Base.TTY}, ErrorException, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{typeof(Base.convert), Type{Base.StackTraces.StackFrame}, Base.StackTraces.StackFrame})
precompile(Tuple{typeof(Revise.update_stacktrace_lineno!), Array{Any, 1}})
precompile(Tuple{typeof(VSCodeServer.safe_render), VSCodeServer.EvalErrorStack})
precompile(Tuple{typeof(Base.append!), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(VSCodeServer.sprint_error), ErrorException})
precompile(Tuple{VSCodeServer.var"##sprintlimited#17", Function, Int64, String, Bool, typeof(VSCodeServer.sprintlimited), ErrorException, Vararg{Any}})
precompile(Tuple{typeof(Base.display_error), Base.IOContext{VSCodeServer.LimitIO{Base.GenericIOBuffer{Array{UInt8, 1}}}}, ErrorException, Array{Any, 1}})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{VSCodeServer.LimitIO{Base.GenericIOBuffer{Array{UInt8, 1}}}}, String})
precompile(Tuple{typeof(Base.print), Base.IOContext{VSCodeServer.LimitIO{Base.GenericIOBuffer{Array{UInt8, 1}}}}, String})
precompile(Tuple{typeof(VSCodeServer.backtrace_string), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{Base.var"##sprint#426", Nothing, Int64, typeof(Base.sprint), Function, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:path, :line), Tuple{String, Int64}}}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:path, :line), Tuple{String, Int64}}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String, Vararg{String}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, Symbol, Array{VSCodeServer.Frame, 1}})
precompile(Tuple{typeof(Plots.histogram), Any})
precompile(Tuple{Plots.var"##histogram#427", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(Plots.histogram), Any})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:seriestype,), Tuple{Symbol}}})
precompile(Tuple{RecipesBase.var"#plot##kw", NamedTuple{(:seriestype,), Tuple{Symbol}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{Type{NamedTuple{(:formatter,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:formatter,), Tuple{Symbol}}})
precompile(Tuple{Plots.var"#attr!##kw", NamedTuple{(:formatter,), Tuple{Symbol}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{Base.Val{:histogram}}, Any, Any, Any})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesPipeline.DefaultsDict, Symbol, Any})
precompile(Tuple{typeof(Base.iterate), Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.GRBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.KeySet{Symbol, RecipesPipeline.DefaultsDict}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base.in), Nothing, Tuple{Bool, Nothing, Symbol}})
precompile(Tuple{typeof(Plots.check_contour_levels), Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{Base.Val{:barhist}}, Any, Any, Any})
precompile(Tuple{Type{NamedTuple{(:normed, :weights), T} where T<:Tuple}, Tuple{Bool, Nothing}})
precompile(Tuple{Plots.var"#_make_hist##kw", NamedTuple{(:normed, :weights), Tuple{Bool, Nothing}}, typeof(Plots._make_hist), Tuple{Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Base.filter!), typeof(Base.isfinite), Array{Float64, 1}})
precompile(Tuple{typeof(Statistics._quantilesort!), Array{Float64, 1}, Bool, Float64, Float64})
precompile(Tuple{Statistics.var"#_quantile##kw", NamedTuple{(:alpha, :beta), Tuple{Float64, Float64}}, typeof(Statistics._quantile), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(StatsBase.histrange), Array{Float64, 1}, Int64, Symbol})
precompile(Tuple{StatsBase.var"##s129#140", Any, Any, Any})
precompile(Tuple{StatsBase.var"##fit#157", Symbol, typeof(StatsAPI.fit), Type{StatsBase.Histogram{Int64, N, E} where E where N}, Tuple{Array{Float64, 1}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}})
precompile(Tuple{Type{AbstractArray{Float64, 1}}, Array{Int64, 1}})
precompile(Tuple{StatsBase.var"##s128#165", Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Base.Cartesian.var"#@nref", LineNumberNode, Module, Int64, Symbol, Any})
precompile(Tuple{StatsBase.var"##s129#163", Any, Any, Any, Any})
precompile(Tuple{StatsBase.var"##s129#141", Any, Any, Any})
precompile(Tuple{typeof(Base.map), typeof(Base.eltype), Core.SimpleVector})
precompile(Tuple{typeof(Base.promote_type), Type})
precompile(Tuple{StatsBase.var"##normalize!#164", Symbol, typeof(LinearAlgebra.normalize!), StatsBase.Histogram{Float64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), StatsBase.Histogram{Float64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Symbol})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{Base.Val{:barbins}}, Any, Any, Any})
precompile(Tuple{typeof(Plots._preprocess_binlike), RecipesPipeline.DefaultsDict, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Float64, 1}, Plots.var"#193#195"{Float64}}})
precompile(Tuple{typeof(Base.diff), Array{Float64, 1}})
precompile(Tuple{typeof(Plots._bin_centers), Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{Base.Val{:bar}}, Any, Any, Any})
precompile(Tuple{typeof(Plots._preprocess_barlike), RecipesPipeline.DefaultsDict, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Plots.var"#186#189"{Plots.Axis}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Float64, 1}, Plots.var"#186#189"{Plots.Axis}}})
precompile(Tuple{typeof(Base.eachindex), Array{Float64, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.OneTo{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots._cycle), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Plots._cycle), Int64, Int64})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Float64}, Float64, Float64, Float64, Float64, Vararg{Float64}})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Float64}, Float64, Int64, Int64, Float64, Vararg{Float64}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.setproperty!), Plots.Extrema, Symbol, Float64})
precompile(Tuple{typeof(Base.copy), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base._grow!), Function, Array{Symbol, 1}, Tuple{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol}}})
precompile(Tuple{typeof(Base.filter!), Base.var"#115#116"{typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Symbol}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.mapfilter), Base.var"#115#116"{typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Symbol}}, typeof(Base.push!), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.mapfilter), Base.var"#115#116"{typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Symbol}}, typeof(Base.push!), Tuple{Symbol, Symbol, Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Nothing})
precompile(Tuple{Type{RecipesBase.RecipeData}, RecipesPipeline.DefaultsDict, Tuple{}})
precompile(Tuple{typeof(Base.iterate), Array{RecipesBase.RecipeData, 1}, Int64})
precompile(Tuple{typeof(Plots.gr_set_line), Float64, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64})
precompile(Tuple{typeof(Plots.xlims), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.ylims), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.copy), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.iter_segments), Array{Float64, 1}, Vararg{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.map), typeof(Base.firstindex), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.map), typeof(Base.lastindex), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{Plots.NaNSegmentsIterator}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.findnext), Base.var"#84#85"{Plots.var"#20#21"{Tuple{Array{Float64, 1}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), Plots.var"#20#21"{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Plots.warn_on_attr_dim_mismatch), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Nothing, Base.Generator{Array{Any, 1}, Plots.var"#7#11"}})
precompile(Tuple{Base.MappingRF{Plots.var"#7#11", Base.MappingRF{Plots.var"#12#15", Base.BottomRF{typeof(Base.min)}}}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{Base.MappingRF{Plots.var"#7#11", Base.MappingRF{Plots.var"#13#16", Base.BottomRF{typeof(Base.max)}}}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.vcat), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Plots.gr_set_fill), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(GR.fillarea), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_draw_segments), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Nothing, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.intersect), Base.OneTo{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.isempty), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.gr_draw_marker), Plots.Series, Float64, Float64, Tuple{Float64, Float64}, Int64, Int64, Int64, Symbol})
precompile(Tuple{typeof(Plots.gr_set_bordercolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_set_markercolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_set_transparency), Int64})
precompile(Tuple{typeof(GR.setmarkersize), Float64})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#2#29", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#2#29", Any, Any, Any})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64, String, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, UInt8})
precompile(Tuple{typeof(Tokenize.Lexers.lex_plus), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Tokenize.Tokens.Kind, Symbol}, Tokenize.Tokens.Kind})
precompile(Tuple{OhMyREPL.BracketInserter.var"#6#13"{Array{Char, 1}, Array{Char, 1}}, REPL.LineEdit.MIState, REPL.LineEditREPL, String})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#23#50", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#23#50", Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.move_input_end), Union{REPL.LineEdit.MIState, REPL.LineEdit.ModeState}})
precompile(Tuple{typeof(REPL.LineEdit.transition), Function, REPL.LineEdit.MIState, Union{Symbol, REPL.LineEdit.TextInterface}})
precompile(Tuple{typeof(Tokenize.Lexers.simple_hash), Char, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{UInt64, Tokenize.Tokens.Kind}, UInt64})
precompile(Tuple{typeof(Tokenize.Lexers.simple_hash), Char, UInt64})
precompile(Tuple{typeof(Base.print_to_string), Tokenize.Tokens.Kind})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.BracketInserter.var"#1#8"{Array{Char, 1}, Char, Char}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#1#8"{Array{Char, 1}, Char, Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any}})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.BracketInserter.var"#2#9"{Char}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#2#9"{Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any}})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#22#49", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#22#49", Any, Any, Any})
precompile(Tuple{typeof(REPL.return_callback), Any})
precompile(Tuple{typeof(OhMyREPL._check_pass_name), OhMyREPL.PassHandler, String, Bool})
precompile(Tuple{typeof(REPL.LineEdit.mode), REPL.LineEdit.MIState})
precompile(Tuple{REPL.var"#do_respond#66"{Bool, Bool, REPL.var"#77#87"{REPL.LineEditREPL, REPL.REPLHistoryProvider}, REPL.LineEditREPL, REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, Any, Bool})
precompile(Tuple{REPL.var"#77#87"{REPL.LineEditREPL, REPL.REPLHistoryProvider}, Any})
precompile(Tuple{typeof(Revise.revise_first), Expr})
precompile(Tuple{VSCodeServer.var"#66#68"{REPL.LineEditREPL, REPL.LineEdit.Prompt}, Expr})
precompile(Tuple{typeof(VSCodeServer.evalrepl), Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{VSCodeServer.var"#70#72"{Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Tuple{}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{VSCodeServer.var"#70#72"{Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Tuple{}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{VSCodeServer.var"#70#72"{Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Tuple{}}, Int64, Int64})
precompile(Tuple{VSCodeServer.var"#70#72"{Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt}})
precompile(Tuple{typeof(Base.isempty), Base.Set{Tuple{Revise.PkgData, String}}})
precompile(Tuple{typeof(REPL.with_repl_linfo), Any, REPL.LineEditREPL})
precompile(Tuple{REPL.var"#45#46"{REPL.LineEditREPL, Pair{Any, Bool}, Bool, Bool}, Any})
precompile(Tuple{typeof(Base.Multimedia.display), VSCodeServer.InlineDisplay, Function})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(Base.methods), Any})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{REPL.LineEdit.TextInterface, REPL.LineEdit.ModeState}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{typeof(VSCodeServer.wsicon), Nothing})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Nothing})
precompile(Tuple{typeof(VSCodeServer.treerender), Nothing})
precompile(Tuple{typeof(VSCodeServer.can_display), Nothing})
precompile(Tuple{typeof(Base.depwarn), String, Symbol})
precompile(Tuple{Type{NamedTuple{(:exception, :backtrace), T} where T<:Tuple}, Tuple{UndefVarError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{UndefVarError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{UndefVarError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.showerror), Base.IOContext{Base.TTY}, UndefVarError, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{typeof(REPL.REPLCompletions.UndefVarError_hint), Base.IOContext{Base.TTY}, UndefVarError})
precompile(Tuple{Pkg.REPLMode.var"#30#32"{REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any}})
precompile(Tuple{typeof(Pkg.REPLMode.promptf)})
precompile(Tuple{typeof(Base.:(==)), Nothing, String})
precompile(Tuple{REPL.LineEdit.var"#25#26"{REPL.var"#67#70"{REPL.LineEdit.Prompt}, String}, Any, Any})
precompile(Tuple{REPL.var"#67#70"{REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, Any, Vararg{Any}})
precompile(Tuple{REPL.var"#68#71"{REPL.LineEdit.MIState, Base.GenericIOBuffer{Array{UInt8, 1}}, REPL.LineEdit.Prompt}})
precompile(Tuple{PythonCall.C.var"#35#43"})
precompile(Tuple{PythonCall.C.var"#33#41"})
precompile(Tuple{typeof(FileWatching.uvfinalize), FileWatching.PollingFileWatcher})
